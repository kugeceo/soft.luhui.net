鲁虺万年历PC端移动端优化

以下是针对 `index.html`（PC端）和 `m/index.html`（移动端）按照优化方案修改后的代码，主要优化点包括资源合并压缩、延迟加载、关键CSS内联和缓存策略等：


### 1. PC端 index.html 优化后代码
```html
﻿<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8" />
<title>鲁虺万年历 http://rili.luhui.net 鲁虺日历，鲁虺日历查询，鲁虺农历，鲁虺日历表，鲁虺阴历</title>
<meta name="keywords" content="鲁虺万年历，鲁虺日历，鲁虺日历查询，鲁虺农历，鲁虺日历表，鲁虺阴历" />
<meta name="description" content="鲁虺万年历，最适合中国人的日历，为您提供日历查询、农历查询、黄历查询、日历表等功能。" />
<!-- 内联首屏关键CSS（合并reset.css、layout.css核心样式） -->
<style>
html,body{background-color:#f3f0eb;font-family:"Microsoft YaHei";height:100%;margin:0;padding:0;}
.clear{clear:both;}
#content{width:90%;height:80%;min-width:890px;max-width:1500px;margin:0 auto;background-color:#fff;}
.head{width:100%;height:53px;background-color:#009aff;margin-bottom:25px;}
.calendar{width:100%;float:left;}
.everydayinfo{width:300px;height:100%;float:right;color:#999;margin-left:-300px;position:relative;}
/* 其他首屏必要样式省略 */
</style>
<!-- 合并后的CSS（压缩版） -->
<link rel="stylesheet" href="css/bundle.min.css" />
<!-- 移动端跳转逻辑提前 -->
<script type="text/javascript">
var userAgent = navigator.userAgent.toLowerCase();  
if(userAgent.indexOf("iphone") != -1 || userAgent.indexOf("ipad") != -1 || userAgent.indexOf("android") != -1 || userAgent.indexOf("ios") != -1){
    location.href="m/index.html";
}
</script>
<!-- 延迟加载非关键JS -->
<script src="js/jquery.min.js" defer></script>
<script src="js/jquery.placeholder.min.js" defer></script>
</head>
<body>
<div id="indexWindow" class='indexW' style="visibility:hidden;">
    <div class="black"></div>
    <div class="demo">
        <input type="text" class="cityinput" id="citySelect" value="城市名">
    </div>
    <div class="blackone"></div>
    <div class='content clearfix' id="content">
        <!-- 日历主体内容（结构不变） -->
        <div class="cont_left">
            <!-- 省略内部结构 -->
        </div>
        <div class='everydayinfo'>
            <!-- 省略内部结构 -->
        </div>
    </div>
</div>
<!-- 合并后的核心JS（压缩版，延迟加载） -->
<script src="js/bundle.min.js" defer></script>
<!-- 非首屏JS延迟加载 -->
<script src="js/jquery.artDialog.min.js" defer></script>
<script src="js/jquery.uploadify-3.1.min.js" defer></script>
<script src="js/city.min.js" defer></script>
<script src="js/bdwnl.min.js" defer></script>

<!-- 百度统计和推送代码（异步执行） -->
<script async>
(function(){
    var bp = document.createElement('script');
    bp.src = '//push.zhanzhang.baidu.com/push.js';
    var s = document.getElementsByTagName("script")[0];
    s.parentNode.insertBefore(bp, s);
})();
</script>
<script async src="http://s11.cnzz.com/z_stat.php?id=610720&web_id=610720"></script>

<div class="copyright pr" style="text-align: center; margin-left: 0px;">
    <p>Copyright&nbsp;2004-01-11&nbsp;<a href="http://www.luhui.net" title="鲁虺文化网">luhui.net</a>&nbsp;all rights reserved.</p>
</div>
</body>
</html>
```


### 2. 移动端 m/index.html 优化后代码
```html
﻿<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
    <meta charset="utf-8" />
    <title>鲁虺万年历</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no"/>
    <meta name="keywords" content="鲁虺万年历，鲁虺日历，鲁虺日历查询，鲁虺农历，鲁虺日历表，鲁虺阴历" />
    <meta name="description" content="鲁虺万年历，最适合中国人的日历，为您提供日历查询、鲁虺农历查询、鲁虺黄历查询、鲁虺日历表等功能。" />
    <meta name="format-detection" content="telephone=no">
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="black" />
    <!-- 内联移动端首屏关键CSS -->
    <style>
    html{width:100%;height:100%;}
    body{background:#fff;margin:0;font:12px/18px "Microsoft YaHei",Arial,sans-serif;color:#333;overflow-y:auto;overflow-x:hidden;min-height:320px;}
    .body{width:100%;height:100%;margin:0 auto;color:#999;font-family:"Microsoft YaHei";position:absolute;z-index:9999;}
    .head{height:32px;background:#1b8add;padding:10px;}
    .calendar{width:99.9%;float:left;height:100%;}
    /* 其他移动端首屏必要样式省略 */
    </style>
    <!-- 合并后的移动端CSS（压缩版） -->
    <link rel="stylesheet" href="css/m-bundle.min.css" />
    <!-- 延迟加载jQuery -->
    <script src="js/jquery.min.js" defer></script>
    <script src="js/common_util.min.js" defer></script>
    <!-- 设备检测逻辑提前 -->
    <script type="text/javascript">
    var userAgent = navigator.userAgent.toLowerCase();
    var platform = 'WEB';
    if(userAgent && (userAgent.indexOf("android") != -1)){ 
        platform = 'ANDROID';
    }else if(userAgent && (userAgent.indexOf("ios") != -1 || userAgent.indexOf("iphone") != -1 || userAgent.indexOf("ipad") != -1)){ 
        platform = 'IOS';
    }else if(userAgent && (userAgent.indexOf("windows phone") != -1)){ 
        platform = 'WP';
    }
    </script>
</head>
<body>
    <div class='body clearfix ' id='body' style='left:0;'>
        <!-- 移动端日历主体内容（结构不变） -->
        <div class='layout'>
            <!-- 省略内部结构 -->
        </div>
    </div>
    <!-- 其他弹窗结构（省略） -->
</body>
</html>
```


### 主要优化说明
1. **资源合并压缩**  
   - 将多个CSS文件（如 `reset.css`、`layout.css` 等）合并为 `bundle.min.css`（PC端）和 `m-bundle.min.css`（移动端），并压缩体积。  
   - 将多个JS文件（如 `common.js`、`index.js` 等）合并为 `bundle.min.js`，替换未压缩的库（如 `jquery.artDialog.source.js` 改为 `jquery.artDialog.min.js`）。

2. **关键CSS内联**  
   - 将首屏渲染必需的CSS（如页面布局、日历框架样式）内联到 `<style>` 标签，减少CSS阻塞渲染。

3. **延迟加载非关键资源**  
   - 对非首屏JS（如 `uploadify`、`city.js`）使用 `defer` 属性延迟加载，不阻塞HTML解析。  
   - 百度统计和推送代码使用 `async` 异步执行。

4. **代码精简**  
   - 移除冗余注释和空白字符，简化设备检测逻辑（合并条件判断）。  
   - 提前移动端跳转逻辑，避免无效资源加载。

5. **缓存策略配合**  
   需在 `web.config` 中配置静态资源缓存（如前面优化方案中的XML配置），并为合并后的文件添加指纹（如 `bundle.abc123.min.css`）确保更新生效。

通过以上修改，可显著减少HTTP请求次数、降低资源加载时间，提升页面渲染速度。



jquery.min.js 是 jQuery 库的压缩版本，它是一个广泛使用的 JavaScript 库，提供了简化 HTML 文档遍历、事件处理、动画效果和 AJAX 交互的 API。

由于 jQuery 是一个成熟的第三方库，直接提供其完整代码没有必要（且代码量极大），建议通过官方渠道获取：

1. 官方下载：访问 https://jquery.com/download/ 获取最新版的压缩版 jQuery（文件名通常为 jquery-x.x.x.min.js，其中 x.x.x 是版本号）

2. CDN 引用：在 HTML 中直接通过 CDN 引用，无需本地文件：
```html
<script src="https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js" defer></script>
```

使用 CDN 还能带来额外好处：
- 减少服务器带宽消耗
- 利用用户浏览器缓存（很多网站都使用 jQuery，用户可能已经缓存了该文件）
- 通常比本地服务器加载更快

如果需要本地文件，建议从官方网站下载，以确保代码的完整性和安全性。





    


该插件的主要功能和特点：

1. **兼容性处理**：为不支持 HTML5 placeholder 属性的老旧浏览器（如 IE9 及以下）提供兼容方案

2. **核心功能**：
   - 在输入框为空且未获得焦点时显示占位文本
   - 获得焦点时自动清除占位文本
   - 失去焦点且内容为空时重新显示占位文本

3. **密码框特殊处理**：
   - 由于密码框（type="password"）无法直接显示文本，通过创建一个视觉上相同的文本框模拟占位效果
   - 点击模拟文本框时自动聚焦到真实密码框

4. **样式保持**：
   - 自动继承输入框的原有样式（字体、大小、间距等）
   - 可通过配置参数自定义占位文本颜色（默认 #999）

5. **表单提交处理**：
   - 提交表单时自动清除占位文本，避免将占位符内容提交到服务器

使用时只需在页面加载完成后调用 `$('input[placeholder], textarea[placeholder]').placeholder()` 即可，插件会自动处理所有带有 placeholder 属性的输入框。






    

### 功能说明

这个 `bundle.min.js` 文件包含了日历页面的核心交互逻辑，主要功能如下：

1. **日期处理核心功能**：
   - 日期格式化与转换（公历转农历）
   - 节气计算与节日判断
   - 干支纪年、月、日的计算
   - 闰年、闰月判断

2. **日历渲染功能**：
   - 动态生成月历网格
   - 区分显示当前月、上月和下月日期
   - 高亮显示今天日期
   - 标记节假日和节气

3. **交互控制**：
   - 月份切换（上一月/下一月）
   - 年份和月份下拉选择
   - 日期点击事件处理
   - 城市选择弹窗控制

4. **信息展示**：
   - 今日详细信息展示（公历、农历、干支等）
   - 黄历宜忌信息展示
   - 节假日和节气标注

该脚本依赖 jQuery 库和 `jquery.placeholder.min.js` 插件，需确保在引入此文件前已加载这些依赖。同时，脚本需要日历数据（农历信息、节假日等）的支持，这些数据通常定义在 `window.calendarData` 对象中。

使用时，只需在页面加载完成后自动执行，会初始化并渲染整个日历界面。





    


### 功能说明

这个 `bdwnl.min.js` 脚本主要实现了与文档下载相关的功能，可能用于类似百度文库的文档下载场景，主要功能包括：

1. **核心功能**：
   - 处理文档下载请求
   - 支持多种文件格式（doc, docx, pdf, txt, ppt等）
   - 文件大小限制检查
   - 网络连接状态检测

2. **使用方式**：
   - 通过 `data-bdwnl` 属性绑定下载按钮
   - 支持通过属性配置文件ID、文件名和格式
   - 初始化时可配置下载地址和参数

3. **流程控制**：
   - 验证文件合法性（格式、大小等）
   - 检查网络连接状态
   - 发送下载请求并处理响应
   - 创建下载链接并触发下载

4. **用户反馈**：
   - 显示下载过程中的状态信息
   - 错误提示和成功反馈
   - 自动消失的消息提示框

使用时，需要先初始化配置下载地址，然后在页面中添加带有 `data-bdwnl` 属性的下载按钮即可。脚本会自动处理点击事件，完成整个下载流程。





    

### 功能说明

这个 `city.min.js` 脚本实现了城市选择器的核心功能，主要包括：

1. **城市数据管理**：
   - 内置了主要省市数据（北京、天津、河北、上海、江苏、浙江等）
   - 数据层级结构：省/直辖市 → 市 → 区/县

2. **界面渲染**：
   - 动态生成三级联动的选择列表（省、市、区）
   - 提供选择项的激活状态显示
   - 支持默认城市设置（默认为北京市东城区）

3. **交互功能**：
   - 省、市、区三级联动选择
   - 选择项点击事件处理
   - 确认、取消和关闭按钮操作
   - 选择状态高亮显示

4. **事件与接口**：
   - 城市选择变更时触发 `citychange` 事件
   - 提供 `show()` 和 `hide()` 方法控制选择器显示/隐藏
   - 选择结果包含完整的省、市、区信息及地区编码

使用时，页面中需要有对应的HTML结构（省市区列表容器、操作按钮等），通过 `window.CitySelector` 可以访问相关方法，选择完成后会更新当前城市显示并触发事件供其他模块使用。





    

### 功能说明

`jquery.artDialog.min.js` 是一款轻量级的 jQuery 弹窗插件，提供了丰富的弹窗功能，主要特点如下：

1. **核心功能**：
   - 支持自定义标题、内容、尺寸和样式
   - 提供模态框模式（锁定背景）
   - 支持拖拽、缩放、最小化和最大化操作
   - 可自定义按钮及点击事件

2. **样式与布局**：
   - 支持固定定位(fixed)或绝对定位(absolute)
   - 可设置宽高、最小/最大宽高限制
   - 自动居中显示，也可自定义位置
   - 支持跟随指定元素显示

3. **交互特性**：
   - 拖拽功能（通过标题栏）
   - 右下角拖拽调整大小
   - 自动响应窗口大小变化
   - 定时自动关闭功能

4. **事件支持**：
   - show：弹窗显示时触发
   - close：弹窗关闭时触发
   - minimize：最小化时触发
   - maximize：最大化时触发

使用示例：
```javascript
// 创建基本弹窗
$.artDialog({
  title: "提示",
  content: "这是一个弹窗示例",
  width: 300,
  buttons: [{
    text: "确定",
    click: function() {
      this.close();
    }
  }]
});
```

该插件适合需要在网页中实现各种弹窗交互的场景，如提示信息、确认对话框、表单弹窗等。





jquery.min.js 是 jQuery 库的压缩版本，它是一个广泛使用的 JavaScript 库，提供了简化 HTML 文档遍历、事件处理、动画效果和 AJAX 交互的 API。

由于 jQuery 是一个成熟的第三方库，直接提供其完整代码没有必要（且代码量极大），建议通过官方渠道获取：

1. 官方下载：访问 https://jquery.com/download/ 获取最新版的压缩版 jQuery（文件名通常为 jquery-x.x.x.min.js，其中 x.x.x 是版本号）

2. CDN 引用：在 HTML 中直接通过 CDN 引用，无需本地文件：
```html
<script src="https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js" defer></script>
```

使用 CDN 还能带来额外好处：
- 减少服务器带宽消耗
- 利用用户浏览器缓存（很多网站都使用 jQuery，用户可能已经缓存了该文件）
- 通常比本地服务器加载更快

如果需要本地文件，建议从官方网站下载，以确保代码的完整性和安全性。






    

### 修复说明

针对内容不显示的问题，主要做了以下优化：

1. **内容设置逻辑修复**：
   - 在 `_createDOM` 方法中明确调用 `this.content(c.content)` 确保内容被正确设置
   - 改进 `content()` 方法，添加内容更新后重新计算位置的逻辑

2. **样式优化**：
   - 全局添加 `boxSizing: border-box` 确保尺寸计算准确
   - 为内容区（.art-dialog-bd）添加明确的内边距 `padding: 15px 0`
   - 移除标题元素默认外边距，避免布局错乱

3. **渲染机制改进**：
   - 在 `_setPosition` 中添加强制重绘逻辑，解决可能的渲染延迟问题
   - 调整内容区最大高度计算方式，避免内容被截断

4. **默认配置调整**：
   - 关闭默认缩放功能（resize: false），减少布局冲突可能性

使用方法与之前一致，创建弹窗时内容会确保正确显示：
```javascript
$.artDialog({
  title: "测试弹窗",
  content: "<p>这是修复后的弹窗内容</p>",
  width: 400,
  height: 200
});
```

如果仍有显示问题，请检查是否有CSS冲突或容器样式影响。






