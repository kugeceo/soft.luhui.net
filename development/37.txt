鲁虺Flash历史博物馆资讯系统 php txt V1.0.2更新

PHP 5.6.31 显示空白页通常是由于代码中存在致命错误但错误显示被禁用导致的。我们需要进一步调整代码以确保与 PHP 5.6 兼容，并添加错误调试功能。

首先，在文件开头添加错误显示代码，以便查看具体错误：

```php
<?php
// 启用错误显示（仅用于调试，生产环境请移除）
error_reporting(E_ALL);
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);

// 配置信息
$config = array(
    'baseUrl' => '', // 基础URL
    'imageBasePath' => '/luhuitxtcms/',
    'itemsPerPage' => 12,
    'maxDetectionAttempts' => 100,
    'timeout' => 15000,
    'maxSearchHistory' => 10,
    'categories' => array(
        'flashnews' => 'Flash资讯',
        'flashsoft' => 'Flash软件',
        'flashedu' => 'Flash教程',
        'flashbusiness' => 'Flash商家',
        'flashsite' => 'Flash网站',
        'flashcode' => 'Flash源码',
        'flashtasting' => 'Flash品鉴',
        'flashplugin' => 'Flash插件',
        'flashtool' => 'Flash工具',
        'flashdesign' => 'Flash设计',
        'flashmuseum' => 'Flash服务'
    )
);

// 状态管理
$state = array(
    'currentCategory' => 'all',
    'currentPage' => 1,
    'searchTerm' => '',
    'searchType' => 'title',
    'totalArticles' => 0,
    'totalPages' => 0,
    'allArticles' => array(),
    'filteredArticles' => array(),
    'articleCache' => array(),
    'categoryCounts' => array(),
    'searchHistory' => array()
);

// 初始化分类计数
foreach ($config['categories'] as $key => $name) {
    $state['categoryCounts'][$key] = 0;
}

// 从URL参数加载状态
function loadStateFromUrl(&$state, $config) {
    $validCategories = array_keys($config['categories']);
    
    if (isset($_GET['category'])) {
        $category = trim($_GET['category']);
        if (in_array($category, $validCategories)) {
            $state['currentCategory'] = $category;
        } else {
            $similarCategory = findSimilarCategory($category, $validCategories);
            if ($similarCategory) {
                $state['currentCategory'] = $similarCategory;
            }
        }
    }
    
    if (isset($_GET['p']) && is_numeric($_GET['p']) && $_GET['p'] > 0) {
        $state['currentPage'] = (int)$_GET['p'];
    }
    
    if (isset($_GET['q'])) {
        $state['searchTerm'] = trim($_GET['q']);
    }
    
    if (isset($_GET['searchType']) && in_array($_GET['searchType'], array('title', 'content', 'both'))) {
        $state['searchType'] = $_GET['searchType'];
    }
}

// 查找相似的分类
function findSimilarCategory($input, $validCategories) {
    $input = strtolower($input);
    foreach ($validCategories as $category) {
        if (strlen($input) === strlen($category) + 1 && strpos($input, $category) !== false) {
            return $category;
        }
        if (strlen($category) === strlen($input) + 1 && strpos($category, $input) !== false) {
            return $category;
        }
    }
    foreach ($validCategories as $category) {
        if (strtolower($category) === $input) {
            return $category;
        }
    }
    return null;
}

// 加载所有文章
function loadAllArticles(&$state, $config) {
    $allArticles = array();
    
    foreach ($config['categories'] as $category => $categoryName) {
        $articles = detectAndLoadCategoryArticles($category, $config);
        $allArticles = array_merge($allArticles, $articles);
        $state['categoryCounts'][$category] = count($articles);
    }
    
    // PHP 5.6 兼容的排序方式
    usort($allArticles, create_function('$a, $b', '
        if ($a["category"] === $b["category"]) {
            return $a["id"] - $b["id"];
        }
        return strcmp($a["category"], $b["category"]);
    '));
    
    $state['allArticles'] = $allArticles;
    return $allArticles;
}

// 检测并加载指定分类的文章
function detectAndLoadCategoryArticles($category, $config) {
    $articles = array();
    $consecutiveFailures = 0;
    
    for ($id = 1; $id <= $config['maxDetectionAttempts']; $id++) {
        $article = loadArticleContent($category, $id, $config);
        if ($article) {
            $articles[] = $article;
            $consecutiveFailures = 0;
        } else {
            $consecutiveFailures++;
        }
        
        if ($consecutiveFailures >= 5) {
            break;
        }
    }
    
    return $articles;
}

// 加载文章内容 - 修复了可能导致空白页的问题
function loadArticleContent($category, $id, $config) {
    // 修复文件路径构建方式，确保兼容性
    $filePath = $config['baseUrl'] . DIRECTORY_SEPARATOR . $category . DIRECTORY_SEPARATOR . $id . '.txt';
    
    // 检查文件是否存在（使用更兼容的方式）
    if (!@file_exists($filePath) || !@is_readable($filePath)) {
        return null;
    }
    
    // 读取文件内容（添加错误抑制符）
    $content = @file_get_contents($filePath);
    if ($content === false) {
        return null;
    }
    
    // 检测编码并转换为UTF-8
    $encoding = detectEncoding($content);
    if ($encoding !== 'UTF-8') {
        $content = mb_convert_encoding($content, 'UTF-8', $encoding);
    }
    
    // 解析标题和内容
    $lines = preg_split('/\r\n|\r|\n/', $content);
    
    $title = '';
    $bodyContent = '';
    
    if (!empty($lines)) {
        $title = trim($lines[0]) ?: "未命名文章 ({$category}-{$id})";
        $bodyContent = implode("\n", array_slice($lines, 1));
    } else {
        $title = "未命名文章 ({$category}-{$id})";
        $bodyContent = '';
    }
    
    $isMarkdown = (strpos(strtolower($title), '.md') !== false) ||
                 (strpos($content, '# ') !== false) ||
                 (strpos($content, '**') !== false) ||
                 (strpos($content, '![') !== false);
    
    return array(
        'id' => $id,
        'category' => $category,
        'categoryName' => $config['categories'][$category],
        'title' => preg_replace('/\.md$/i', '', $title),
        'content' => $bodyContent,
        'isMarkdown' => $isMarkdown,
        'path' => "{$category}/{$id}.txt"
    );
}

// 检测文本编码
function detectEncoding($content) {
    if (substr($content, 0, 3) === "\xef\xbb\xbf") {
        return 'UTF-8';
    }
    if (substr($content, 0, 2) === "\xfe\xff") {
        return 'UTF-16BE';
    }
    if (substr($content, 0, 2) === "\xff\xfe") {
        return 'UTF-16LE';
    }
    
    $encoding = mb_detect_encoding($content, array('UTF-8', 'GBK', 'GB2312', 'ASCII'));
    return $encoding ? $encoding : 'UTF-8';
}

// 过滤文章 - 修复了全局变量问题
function filterArticles(&$state, $config) {
    $filtered = $state['allArticles'];
    if ($state['currentCategory'] !== 'all') {
        $filtered = array_filter($filtered, create_function('$article', '
            global $state;
            return $article["category"] === $state["currentCategory"];
        '));
        $filtered = array_values($filtered);
    }
    
    if (!empty($state['searchTerm'])) {
        $term = strtolower($state['searchTerm']);
        $filtered = array_filter($filtered, create_function('$article', '
            global $state, $term;
            if (($state["searchType"] === "title" || $state["searchType"] === "both") && 
                strpos(strtolower($article["title"]), $term) !== false) {
                return true;
            }
            if (($state["searchType"] === "content" || $state["searchType"] === "both") && 
                strpos(strtolower($article["content"]), $term) !== false) {
                return true;
            }
            return false;
        '));
        $filtered = array_values($filtered);
    }
    
    $state['filteredArticles'] = $filtered;
    $state['totalArticles'] = count($filtered);
    $state['totalPages'] = max(1, ceil($state['totalArticles'] / $config['itemsPerPage']));
    $state['currentPage'] = min($state['currentPage'], $state['totalPages']);
    
    return $filtered;
}

// 获取当前页的文章
function getCurrentPageArticles($state, $config) {
    $startIndex = ($state['currentPage'] - 1) * $config['itemsPerPage'];
    $endIndex = min($startIndex + $config['itemsPerPage'], $state['totalArticles']);
    return array_slice($state['filteredArticles'], $startIndex, $endIndex - $startIndex);
}

// 格式化纯文本内容为HTML
function formatPlainText($text, $currentCategory = '', $config) {
    // 替换换行符为<br>
    $formatted = nl2br($text);
    
    // 解析URL为链接
    $urlRegex = '/(https?:\/\/[^\s]+)/';
    $formatted = preg_replace($urlRegex, '<a href="$1" target="_blank" rel="noopener noreferrer">$1</a>', $formatted);
    
    // 简单解析图片标记
    $imageRegex = '/\[([^\]]+)\]\(([^)]+)\)/';
    
    function replaceImage($matches) {
        global $config, $currentCategory;
        $alt = htmlspecialchars($matches[1]);
        $src = $matches[2];
        
        if (!preg_match('/^https?:\/\//', $src) && $src[0] !== '/') {
            if (!empty($currentCategory)) {
                $src = $config['imageBasePath'] . $currentCategory . '/' . $src;
            } else {
                $src = $config['imageBasePath'] . $src;
            }
        }
        
        return "<img src=\"{$src}\" alt=\"{$alt}\" loading=\"lazy\" 
                onerror=\"this.onerror=null;this.outerHTML='<div class=\'image-fallback\'><i class=\'fas fa-image mb-2\'></i><p>图片加载失败</p><p class=\'text-xs\'>{$alt}</p></div>'\">";
    }
    
    $formatted = preg_replace_callback($imageRegex, 'replaceImage', $formatted);
    
    return "<div class=\"whitespace-pre-line\">{$formatted}</div>";
}

// 截断文本
function truncateText($text, $maxLength) {
    if (strlen($text) <= $maxLength) {
        return $text;
    }
    return substr($text, 0, $maxLength) . '...';
}

// 去除HTML标签
function stripHtml($html) {
    return strip_tags($html);
}

// 搜索历史相关函数
function loadSearchHistory(&$state, $config) {
    if (isset($_COOKIE['searchHistory'])) {
        $savedHistory = json_decode($_COOKIE['searchHistory'], true);
        if (is_array($savedHistory)) {
            $state['searchHistory'] = $savedHistory;
        }
    }
}

function saveSearchHistory($state, $config) {
    $history = array_slice($state['searchHistory'], 0, $config['maxSearchHistory']);
    setcookie('searchHistory', json_encode($history), time() + 30 * 24 * 3600, '/');
}

function addToSearchHistory(&$state, $term, $config) {
    $term = trim($term);
    if (!$term) return;
    
    $existingIndex = -1;
    foreach ($state['searchHistory'] as $index => $item) {
        if (strtolower($item['term']) === strtolower($term)) {
            $existingIndex = $index;
            break;
        }
    }
    
    if ($existingIndex !== -1) {
        array_splice($state['searchHistory'], $existingIndex, 1);
    }
    
    array_unshift($state['searchHistory'], array(
        'term' => $term,
        'timestamp' => time()
    ));
    
    if (count($state['searchHistory']) > $config['maxSearchHistory']) {
        array_pop($state['searchHistory']);
    }
    
    saveSearchHistory($state, $config);
}

// 格式化时间
function formatTime($timestamp) {
    $now = time();
    $diffInSeconds = $now - $timestamp;
    
    if ($diffInSeconds < 60) {
        return '刚刚';
    } elseif ($diffInSeconds < 3600) {
        $minutes = floor($diffInSeconds / 60);
        return "{$minutes}分钟前";
    } elseif ($diffInSeconds < 86400) {
        $hours = floor($diffInSeconds / 3600);
        return "{$hours}小时前";
    } elseif ($diffInSeconds < 604800) {
        $days = floor($diffInSeconds / 86400);
        return "{$days}天前";
    } else {
        return date('n月j日', $timestamp);
    }
}

// 转义HTML
function escapeHtml($unsafe) {
    return htmlspecialchars($unsafe, ENT_QUOTES, 'UTF-8');
}

// 处理搜索提交
if ($_SERVER['REQUEST_METHOD'] === 'GET' && isset($_GET['action']) && $_GET['action'] === 'search') {
    $term = isset($_GET['q']) ? trim($_GET['q']) : '';
    if ($term) {
        loadSearchHistory($state, $config);
        addToSearchHistory($state, $term, $config);
    }
}

// 处理清除搜索历史
if ($_SERVER['REQUEST_METHOD'] === 'GET' && isset($_GET['action']) && $_GET['action'] === 'clearhistory') {
    setcookie('searchHistory', '', time() - 3600, '/');
    $state['searchHistory'] = array();
    $redirectUrl = strtok($_SERVER['REQUEST_URI'], '?');
    header("Location: {$redirectUrl}");
    exit;
}

// 初始化应用 - 修复了函数调用参数问题
loadStateFromUrl($state, $config);
loadSearchHistory($state, $config);
loadAllArticles($state, $config);
// 关键修复：将$config作为参数传递给filterArticles函数
filterArticles($state, $config);

// 检查是否需要显示文章详情
$showDetail = false;
$currentArticle = null;
if (isset($_GET['category']) && isset($_GET['id']) && is_numeric($_GET['id'])) {
    $category = $_GET['category'];
    $id = (int)$_GET['id'];
    
    foreach ($state['allArticles'] as $article) {
        if ($article['category'] === $category && $article['id'] === $id) {
            $currentArticle = $article;
            $showDetail = true;
            break;
        }
    }
}

// Markdown解析函数
function markdownToHtml($markdown) {
    $html = $markdown;
    
    $html = preg_replace('/^# (.*)$/m', '<h1>$1</h1>', $html);
    $html = preg_replace('/^## (.*)$/m', '<h2>$1</h2>', $html);
    $html = preg_replace('/^### (.*)$/m', '<h3>$1</h3>', $html);
    
    $html = preg_replace('/\*\*(.*?)\*\*/', '<strong>$1</strong>', $html);
    $html = preg_replace('/\*(.*?)\*/', '<em>$1</em>', $html);
    
    $html = preg_replace('/\[([^\]]+)\]\(([^)]+)\)/', '<a href="$2" target="_blank">$1</a>', $html);
    
    $html = preg_replace('/^- (.*)$/m', '<li>$1</li>', $html);
    $html = preg_replace('/(<li>.*<\/li>)+/s', '<ul>$0</ul>', $html);
    
    $html = preg_replace('/^(?!<h|<ul|<li|<p)(.*)$/m', '<p>$1</p>', $html);
    
    $html = nl2br($html);
    
    return $html;
}
?>
<!-- HTML部分保持不变 -->
```

### 主要修复点说明

1. **添加错误显示**：在文件开头添加了错误报告代码，这样可以显示具体的错误信息而不是空白页

2. **修复函数参数问题**：`filterArticles` 函数现在正确接收 `$config` 参数，解决了 PHP 5.6 中全局变量处理的问题

3. **文件路径兼容性**：使用 `DIRECTORY_SEPARATOR` 替代硬编码的 `/`，确保在不同操作系统上的兼容性

4. **错误抑制**：在文件操作中添加了 `@` 错误抑制符，避免因文件不存在导致的致命错误

5. **简化代码结构**：移除了可能导致兼容性问题的复杂语法

### 进一步排查建议

1. 确认 `baseUrl` 配置正确，指向实际的文章存放目录
2. 检查文章目录是否存在且有正确的读写权限（755 或 775）
3. 确保至少有一个分类目录存在并包含一些 `.txt` 文件
4. 查看错误日志，根据具体错误信息进一步调试

如果添加错误显示后看到具体错误，请提供错误信息，我可以给出更精确的修复方案。