写一个简单的PHP脚本来将一个文件夹中的所有文件编码都转换为UTF-8。



以下是一个可以批量转换文件夹中所有文件编码为UTF-8的PHP脚本，它会递归处理子文件夹中的所有文件：
batch_convert_to_utf8.php
<?php
/**
 * 批量将文件夹中所有文件转换为UTF-8编码
 * @param string $dir 文件夹路径
 * @param string $sourceEncoding 源文件编码，默认为GB2312
 * @param array $excluded 排除的文件/文件夹列表
 */
function batchConvertToUtf8($dir, $sourceEncoding = 'GB2312', $excluded = []) {
    // 检查目录是否存在
    if (!is_dir($dir)) {
        echo "错误：目录不存在 - {$dir}\n";
        return false;
    }
    
    $handle = opendir($dir);
    if (!$handle) {
        echo "错误：无法打开目录 - {$dir}\n";
        return false;
    }
    
    // 递归处理目录中的所有项
    while (false !== ($file = readdir($handle))) {
        // 跳过当前目录和父目录
        if ($file == '.' || $file == '..') {
            continue;
        }
        
        // 跳过排除列表中的文件/文件夹
        if (in_array($file, $excluded)) {
            continue;
        }
        
        $filePath = $dir . DIRECTORY_SEPARATOR . $file;
        
        // 如果是目录则递归处理
        if (is_dir($filePath)) {
            echo "进入目录：{$filePath}\n";
            batchConvertToUtf8($filePath, $sourceEncoding, $excluded);
        } 
        // 如果是文件则进行编码转换
        elseif (is_file($filePath)) {
            // 尝试转换文件编码
            if (convertFileToUtf8($filePath, $filePath, $sourceEncoding)) {
                echo "已转换：{$filePath}\n";
            } else {
                echo "转换失败：{$filePath}\n";
            }
        }
    }
    
    closedir($handle);
    return true;
}

/**
 * 将单个文件转换为UTF-8编码
 * @param string $inputFile 输入文件路径
 * @param string $outputFile 输出文件路径
 * @param string $sourceEncoding 源文件编码
 * @return bool 转换是否成功
 */
function convertFileToUtf8($inputFile, $outputFile, $sourceEncoding = 'GB2312') {
    try {
        // 读取文件内容
        $content = file_get_contents($inputFile);
        if ($content === false) {
            throw new Exception("无法读取文件内容");
        }
        
        // 检测当前编码
        $detectedEncoding = mb_detect_encoding($content, array('GB2312', 'GBK', 'UTF-8', 'ASCII', 'ISO-8859-1'));
        
        // 如果已经是UTF-8则不需要转换
        if (strtolower($detectedEncoding) === 'utf-8') {
            return true;
        }
        
        // 转换编码为UTF-8
        $utf8Content = mb_convert_encoding($content, 'UTF-8', $sourceEncoding);
        
        // 写入转换后的内容
        $result = file_put_contents($outputFile, $utf8Content);
        if ($result === false) {
            throw new Exception("无法写入文件");
        }
        
        return true;
    } catch (Exception $e) {
        return false;
    }
}

// 使用示例
if ($argc < 2) {
    echo "用法: php batch_convert_to_utf8.php 文件夹路径 [源编码]\n";
    echo "示例: php batch_convert_to_utf8.php ./my_files GBK\n";
    exit(1);
}

$targetDir = $argv[1];
$sourceEncoding = isset($argv[2]) ? $argv[2] : 'GB2312';

// 排除的文件/文件夹（可以根据需要修改）
$excludedItems = ['.git', '.svn', 'node_modules', 'vendor'];

echo "开始转换文件夹 '{$targetDir}' 中的所有文件...\n";
$result = batchConvertToUtf8($targetDir, $sourceEncoding, $excludedItems);

if ($result) {
    echo "转换完成！\n";
} else {
    echo "转换过程中出现错误！\n";
}
?>
        


### 使用说明：

1. **运行方式**：通过命令行执行脚本
   ```bash
   php batch_convert_to_utf8.php 目标文件夹路径 [源编码]
   ```

2. **示例**：
   ```bash
   # 转换./project文件夹中的所有文件，源编码为GBK
   php batch_convert_to_utf8.php ./project GBK
   ```

3. **功能特点**：
   - 递归处理所有子文件夹中的文件
   - 自动检测文件编码，只转换非UTF-8编码的文件
   - 可以指定源文件编码（默认GB2312）
   - 包含排除列表，可跳过不需要处理的文件夹（如.git、vendor等）
   - 直接覆盖原文件（建议先备份重要文件）

4. **注意事项**：
   - 转换前请确保对文件进行备份，以防转换过程中出现意外
   - 对于二进制文件（如图片、压缩包等），转换编码可能会损坏文件，但脚本通常会自动跳过或不影响它们
   - 可以根据需要修改`$excludedItems`数组，添加需要排除的文件或文件夹

这个脚本会将指定文件夹中所有文件的编码统一转换为UTF-8，确保在各种客户端中都能正确显示。


















convert_to_utf8.php
<?php
/**
 * 将指定PHP文件从原编码转换为UTF-8编码
 * @param string $inputFile 输入文件路径
 * @param string $outputFile 输出文件路径
 * @param string $sourceEncoding 源文件编码，默认为GB2312
 * @return bool 转换是否成功
 */
function convertToUtf8($inputFile, $outputFile, $sourceEncoding = 'GB2312') {
    // 检查输入文件是否存在
    if (!file_exists($inputFile)) {
        echo "错误：输入文件不存在 - {$inputFile}\n";
        return false;
    }
    
    try {
        // 读取文件内容
        $content = file_get_contents($inputFile);
        if ($content === false) {
            throw new Exception("无法读取文件内容");
        }
        
        // 检测文件编码（可选）
        $detectedEncoding = mb_detect_encoding($content, array('GB2312', 'GBK', 'UTF-8', 'ASCII'));
        echo "检测到的编码: {$detectedEncoding}\n";
        
        // 转换编码为UTF-8
        $utf8Content = mb_convert_encoding($content, 'UTF-8', $sourceEncoding);
        
        // 写入转换后的内容
        $result = file_put_contents($outputFile, $utf8Content);
        if ($result === false) {
            throw new Exception("无法写入文件");
        }
        
        echo "转换成功，已保存至: {$outputFile}\n";
        return true;
    } catch (Exception $e) {
        echo "转换失败: {$e->getMessage()}\n";
        return false;
    }
}

// 使用示例
if ($argc < 3) {
    echo "用法: php convert_to_utf8.php 输入文件路径 输出文件路径 [源编码]\n";
    echo "示例: php convert_to_utf8.php old_file.php new_file.php GBK\n";
    exit(1);
}

$inputFile = $argv[1];
$outputFile = $argv[2];
$sourceEncoding = isset($argv[3]) ? $argv[3] : 'GB2312';

convertToUtf8($inputFile, $outputFile, $sourceEncoding);
?>
