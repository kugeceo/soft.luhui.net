全格式文档鲁虺阅读器1.0.6更新


增加支持keb、 chm格式，修复打开TXT文档乱码bug，修复解析Markdown文件失败: Markdown解析库未加载，请刷新页面重试。修复EPUB解析库未加载，请刷新页面重试
。

用户要求增加对 KEB 和 CHM 格式的支持，修复 TXT 文档乱码问题，以及解决 Markdown 和 EPUB 解析库未加载的错误。我需要逐步分析并解决这些问题。

首先处理格式支持问题：
KEB 格式：这是一种较少见的格式，可能需要特殊处理
CHM 格式：这是微软的编译 HTML 帮助文件，需要专门的解析库
修复 TXT 文档乱码：
加强编码检测和转换机制
增加更多编码选项
优化解码失败时的回退机制
修复库未加载错误：
确保相关库的 CDN 链接正确
添加加载检测和错误处理
可能需要添加备用库链接

让我修改代码来实现这些功能：

添加 CHM 和 KEB 格式支持
增强 TXT 文件编码处理
修复 Markdown 和 EPUB 解析库加载问题
添加更完善的错误处理和提示

对于 CHM 格式，我可以使用chm.js库；对于 KEB 格式，可能需要特殊处理或转换为文本。

对于库加载问题，我会：

检查 CDN 链接是否正确
添加加载状态检测
提供更友好的错误提示和解决方案

对于 TXT 乱码问题，我会：

增加更多编码选项
改进自动检测算法
提供手动选择编码的更明确指引






我将根据您的需求进一步完善文档阅读器，添加KEB和CHM格式支持，并修复已知的解析库和编码问题。


   <!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>全格式文档阅读器</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary-color: #4CAF50;
            --bg-light: #f5f5f5;
            --bg-dark: #1e1e1e;
            --text-light: #333;
            --text-dark: #eee;
            --control-bg: #fff;
            --control-border: #ddd;
            --error-color: #e74c3c;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: "Segoe UI", "Microsoft YaHei", "Malgun Gothic", "Meiryo", sans-serif;
            transition: background-color 0.3s, color 0.3s;
            overflow: hidden;
            height: 100vh;
            background-color: var(--bg-light);
            color: var(--text-light);
        }

        .reader-container {
            height: 100%;
            display: flex;
            flex-direction: column;
        }

        /* 顶部导航栏 */
        .top-bar {
            height: 50px;
            background-color: var(--control-bg);
            border-bottom: 1px solid var(--control-border);
            display: flex;
            align-items: center;
            padding: 0 15px;
            justify-content: space-between;
            z-index: 100;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .doc-title {
            font-size: 16px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            max-width: 50%;
        }

        .top-actions {
            display: flex;
            gap: 10px;
        }

        .tool-btn {
            background: transparent;
            border: none;
            width: 36px;
            height: 36px;
            border-radius: 4px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--text-light);
            transition: background-color 0.2s;
        }

        .tool-btn:hover {
            background-color: rgba(0,0,0,0.05);
        }

        .tool-btn i {
            font-size: 18px;
        }

        /* 主内容区 */
        .main-content {
            flex: 1;
            display: flex;
            overflow: hidden;
        }

        /* 侧边栏 */
        .sidebar {
            width: 0;
            background-color: var(--control-bg);
            border-right: 1px solid var(--control-border);
            overflow-y: auto;
            transition: width 0.3s;
            z-index: 90;
        }

        .sidebar.open {
            width: 280px;
            padding: 15px;
        }

        .sidebar-title {
            font-size: 18px;
            margin-bottom: 15px;
            padding-bottom: 8px;
            border-bottom: 1px solid var(--control-border);
        }

        .toc-item {
            padding: 8px 10px;
            border-radius: 4px;
            cursor: pointer;
            margin-bottom: 5px;
            transition: background-color 0.2s;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .toc-item:hover, .toc-item.active {
            background-color: rgba(76, 175, 128, 0.1);
            color: var(--primary-color);
        }

        .search-box {
            position: relative;
            margin-bottom: 15px;
        }

        .search-input {
            width: 100%;
            padding: 8px 12px 8px 36px;
            border: 1px solid var(--control-border);
            border-radius: 4px;
            font-size: 14px;
        }

        .search-box i {
            position: absolute;
            left: 12px;
            top: 50%;
            transform: translateY(-50%);
            color: #999;
        }

        .search-results {
            max-height: calc(100vh - 200px);
            overflow-y: auto;
        }

        .result-item {
            padding: 10px;
            border-bottom: 1px dashed var(--control-border);
        }

        .result-item:hover {
            background-color: rgba(0,0,0,0.03);
        }

        .result-text {
            font-size: 14px;
            color: #666;
        }

        .result-highlight {
            background-color: rgba(255,255,0,0.3);
            padding: 0 2px;
        }

        /* 编码选择器 */
        .encoding-selector {
            position: absolute;
            top: 60px;
            right: 20px;
            background-color: var(--control-bg);
            border-radius: 4px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.15);
            padding: 10px;
            z-index: 200;
            display: none;
        }

        .encoding-selector.open {
            display: block;
        }

        .encoding-option {
            padding: 6px 10px;
            cursor: pointer;
            border-radius: 3px;
            font-size: 14px;
        }

        .encoding-option:hover {
            background-color: rgba(76, 175, 128, 0.1);
        }

        /* 阅读区 */
        .reading-area {
            flex: 1;
            overflow: hidden;
            position: relative;
        }

        .page-container {
            width: 100%;
            height: 100%;
            overflow: hidden;
            position: relative;
        }

        .page {
            width: 100%;
            min-height: 100%;
            padding: 40px;
            position: absolute;
            top: 0;
            left: 0;
            transition: transform 0.3s ease;
            overflow: hidden;
        }

        .page-content {
            max-width: 800px;
            margin: 0 auto;
            line-height: 1.6;
            font-size: 16px;
            white-space: pre-wrap; /* 保留空白和换行 */
        }

        /* Markdown样式 */
        .markdown-content h1, .markdown-content h2, .markdown-content h3 {
            margin: 1.5em 0 0.5em;
            font-weight: bold;
        }
        
        .markdown-content h1 { font-size: 1.8em; }
        .markdown-content h2 { font-size: 1.5em; }
        .markdown-content h3 { font-size: 1.2em; }
        
        .markdown-content p { margin-bottom: 1em; }
        .markdown-content ul, .markdown-content ol { margin: 1em 0 1em 2em; }
        .markdown-content li { margin-bottom: 0.5em; }
        .markdown-content code { 
            background-color: rgba(0,0,0,0.05);
            padding: 0 4px;
            border-radius: 3px;
            font-family: monospace;
        }
        .markdown-content pre {
            background-color: rgba(0,0,0,0.05);
            padding: 10px;
            border-radius: 4px;
            overflow-x: auto;
            margin: 1em 0;
        }
        .markdown-content blockquote {
            border-left: 3px solid var(--primary-color);
            padding-left: 10px;
            margin: 1em 0;
            color: #666;
        }

        /* 文件选择区 */
        .file-selector {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            background-color: var(--bg-light);
            z-index: 50;
            padding: 20px;
            text-align: center;
        }

        .selector-icon {
            font-size: 60px;
            color: var(--primary-color);
            margin-bottom: 20px;
        }

        .selector-title {
            font-size: 22px;
            margin-bottom: 15px;
            color: var(--text-light);
        }

        .selector-desc {
            color: #666;
            margin-bottom: 30px;
            max-width: 600px;
        }

        .error-message {
            color: var(--error-color);
            margin: 15px 0;
            padding: 10px 15px;
            border: 1px solid #f8d7da;
            border-radius: 4px;
            background-color: #f8d7da20;
            max-width: 500px;
            display: none;
        }

        .supported-formats {
            font-size: 14px;
            color: #888;
            margin-top: 20px;
        }

        .format-tag {
            display: inline-block;
            background-color: rgba(76, 175, 128, 0.1);
            color: var(--primary-color);
            padding: 2px 8px;
            border-radius: 12px;
            margin: 0 3px 5px;
            font-size: 12px;
        }

        .browse-btn {
            background-color: var(--primary-color);
            color: white;
            border: none;
            padding: 10px 25px;
            border-radius: 4px;
            font-size: 16px;
            cursor: pointer;
            transition: background-color 0.2s;
            margin: 5px;
        }

        .browse-btn:hover {
            background-color: #3d8b40;
        }

        /* 底部控制栏 */
        .bottom-bar {
            height: 55px;
            background-color: var(--control-bg);
            border-top: 1px solid var(--control-border);
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 0 20px;
            z-index: 100;
        }

        .page-controls {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .nav-btn {
            background: transparent;
            border: none;
            width: 36px;
            height: 36px;
            border-radius: 4px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--text-light);
        }

        .nav-btn:disabled {
            color: #ccc;
            cursor: not-allowed;
        }

        .page-info {
            font-size: 14px;
            color: #666;
        }

        .zoom-controls {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .zoom-btn {
            background: transparent;
            border: 1px solid var(--control-border);
            width: 30px;
            height: 30px;
            border-radius: 4px;
            cursor: pointer;
        }

        /* 设置面板 */
        .settings-panel {
            position: absolute;
            bottom: 60px;
            right: 20px;
            width: 300px;
            background-color: var(--control-bg);
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            padding: 15px;
            z-index: 200;
            display: none;
        }

        .settings-panel.open {
            display: block;
        }

        .settings-section {
            margin-bottom: 20px;
        }

        .settings-title {
            font-size: 16px;
            margin-bottom: 10px;
            color: var(--text-light);
        }

        .font-size-controls {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .theme-options {
            display: flex;
            gap: 10px;
            margin-top: 10px;
        }

        .theme-option {
            width: 30px;
            height: 30px;
            border-radius: 4px;
            cursor: pointer;
            border: 2px solid transparent;
        }

        .theme-option.active {
            border-color: var(--primary-color);
        }

        .theme-light {
            background-color: #fff;
        }

        .theme-sepia {
            background-color: #f4ecd8;
        }

        .theme-dark {
            background-color: #2d2d2d;
        }

        /* 加载动画 */
        .loader {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            z-index: 1000;
            display: none;
            text-align: center;
        }

        .loader.show {
            display: block;
        }

        .loader-spinner {
            width: 50px;
            height: 50px;
            border: 5px solid rgba(76, 175, 128, 0.2);
            border-top-color: var(--primary-color);
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto 15px;
        }

        .loader-text {
            color: var(--text-light);
            font-size: 14px;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        /* 库加载错误提示 */
        .library-error {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: white;
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 20px;
            max-width: 500px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            z-index: 1001;
            display: none;
        }

        .library-error.show {
            display: block;
        }

        .library-error h3 {
            color: var(--error-color);
            margin-bottom: 10px;
        }

        .library-error p {
            margin-bottom: 15px;
            line-height: 1.5;
        }

        .retry-btn {
            background-color: var(--primary-color);
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            cursor: pointer;
        }

        /* 响应式设计 */
        @media (max-width: 768px) {
            .page {
                padding: 20px 15px;
            }

            .sidebar.open {
                width: 240px;
            }

            .doc-title {
                max-width: 40%;
                font-size: 14px;
            }

            .settings-panel, .encoding-selector, .library-error {
                width: calc(100% - 40px);
                left: 20px;
                right: 20px;
            }
        }

        /* 深色模式 */
        body.dark-mode {
            --bg-light: var(--bg-dark);
            --text-light: var(--text-dark);
            --control-bg: #2d2d2d;
            --control-border: #444;
        }

        body.dark-mode .page-content {
            color: #ddd;
        }

        body.dark-mode .result-text {
            color: #bbb;
        }

        body.dark-mode .loader-text {
            color: var(--text-dark);
        }

        body.dark-mode .markdown-content blockquote {
            color: #aaa;
        }

        body.dark-mode .markdown-content code,
        body.dark-mode .markdown-content pre {
            background-color: rgba(255,255,255,0.1);
        }

        body.dark-mode .library-error {
            background-color: #2d2d2d;
            border-color: #444;
        }

        /* 阅读模式类 */
        .reading-mode-sepia {
            --bg-light: #f4ecd8;
            --text-light: #594433;
        }

        .reading-mode-sepia .markdown-content blockquote {
            color: #776040;
        }
    </style>
</head>
<body>
    <div class="reader-container">
        <!-- 顶部导航栏 -->
        <div class="top-bar">
            <div class="doc-title" id="docTitle">请选择文档</div>
            <div class="top-actions">
                <button class="tool-btn" id="newDocBtn" title="打开新文档"><i class="fas fa-file"></i></button>
                <button class="tool-btn" id="encodingBtn" title="编码设置"><i class="fas fa-code"></i></button>
                <button class="tool-btn" id="tocBtn" title="目录"><i class="fas fa-list"></i></button>
                <button class="tool-btn" id="searchBtn" title="搜索"><i class="fas fa-search"></i></button>
                <button class="tool-btn" id="bookmarkBtn" title="书签"><i class="fas fa-bookmark"></i></button>
                <button class="tool-btn" id="settingsBtn" title="设置"><i class="fas fa-cog"></i></button>
            </div>
        </div>

        <!-- 编码选择器 -->
        <div class="encoding-selector" id="encodingSelector">
            <div class="encoding-option" data-encoding="auto">自动检测</div>
            <div class="encoding-option" data-encoding="utf8">UTF-8</div>
            <div class="encoding-option" data-encoding="gbk">GBK</div>
            <div class="encoding-option" data-encoding="gb18030">GB18030</div>
            <div class="encoding-option" data-encoding="gb2312">GB2312</div>
            <div class="encoding-option" data-encoding="big5">BIG5 (繁体中文)</div>
            <div class="encoding-option" data-encoding="euc-kr">EUC-KR (韩文)</div>
            <div class="encoding-option" data-encoding="shift_jis">Shift-JIS (日文)</div>
            <div class="encoding-option" data-encoding="iso-2022-jp">ISO-2022-JP (日文)</div>
        </div>

        <!-- 库加载错误提示 -->
        <div class="library-error" id="libraryError">
            <h3><i class="fas fa-exclamation-circle"></i> 解析库加载失败</h3>
            <p id="libraryErrorMsg">无法加载所需的文档解析库，请尝试刷新页面或检查网络连接。</p>
            <button class="retry-btn" id="retryLoadBtn">重试加载</button>
        </div>

        <!-- 主内容区 -->
        <div class="main-content">
            <!-- 侧边栏 (目录/搜索/书签) -->
            <div class="sidebar" id="tocSidebar">
                <div class="sidebar-title">目录</div>
                <div id="tocList"></div>
            </div>

            <div class="sidebar" id="searchSidebar">
                <div class="sidebar-title">搜索</div>
                <div class="search-box">
                    <i class="fas fa-search"></i>
                    <input type="text" class="search-input" id="searchInput" placeholder="输入搜索内容...">
                </div>
                <div class="search-results" id="searchResults"></div>
            </div>

            <div class="sidebar" id="bookmarkSidebar">
                <div class="sidebar-title">书签</div>
                <div id="bookmarkList">
                    <div style="color: #999; padding: 10px;">暂无书签</div>
                </div>
            </div>

            <!-- 阅读区 -->
            <div class="reading-area">
                <div class="page-container" id="pageContainer"></div>
                
                <!-- 文件选择区 -->
                <div class="file-selector" id="fileSelector">
                    <div class="selector-icon">
                        <i class="fas fa-file-alt"></i>
                    </div>
                    <h2 class="selector-title">全格式文档阅读器</h2>
                    <p class="selector-desc">支持多种文档格式，拖放文件到此处或点击下方按钮选择文档开始阅读</p>
                    <div class="error-message" id="errorMessage"></div>
                    <button class="browse-btn" id="browseBtn">选择文档</button>
                    <input type="file" id="fileInput" style="display: none;" accept=".txt,.rtf,.pdf,.epub,.mobi,.doc,.docx,.xls,.xlsx,.ppt,.pptx,.htm,.html,.csv,.xdoc,.md,.markdown,.chm,.keb">
                    <div class="supported-formats">
                        支持格式:
                        <span class="format-tag">TXT</span>
                        <span class="format-tag">PDF</span>
                        <span class="format-tag">EPUB</span>
                        <span class="format-tag">MOBI</span>
                        <span class="format-tag">CHM</span>
                        <span class="format-tag">KEB</span>
                        <span class="format-tag">MD</span>
                        <span class="format-tag">更多...</span>
                    </div>
                </div>

                <!-- 加载动画 -->
                <div class="loader" id="loader">
                    <div class="loader-spinner"></div>
                    <div class="loader-text" id="loaderText">正在加载文档...</div>
                </div>
            </div>
        </div>

        <!-- 底部控制栏 -->
        <div class="bottom-bar">
            <div class="page-controls">
                <button class="nav-btn" id="prevPage" disabled title="上一页">
                    <i class="fas fa-chevron-left"></i>
                </button>
                <div class="page-info" id="pageInfo">第 1 页 / 共 0 页</div>
                <button class="nav-btn" id="nextPage" disabled title="下一页">
                    <i class="fas fa-chevron-right"></i>
                </button>
            </div>
            
            <div class="zoom-controls">
                <button class="zoom-btn" id="zoomOut" title="缩小"><i class="fas fa-minus"></i></button>
                <button class="zoom-btn" id="zoomReset" title="重置大小"><i class="fas fa-compress-arrows-alt"></i></button>
                <button class="zoom-btn" id="zoomIn" title="放大"><i class="fas fa-plus"></i></button>
            </div>
        </div>

        <!-- 设置面板 -->
        <div class="settings-panel" id="settingsPanel">
            <div class="settings-section">
                <div class="settings-title">字体大小</div>
                <div class="font-size-controls">
                    <button class="zoom-btn" id="fontSmall"><i class="fas fa-text-height fa-rotate-180"></i></button>
                    <button class="zoom-btn" id="fontMedium">标准</button>
                    <button class="zoom-btn" id="fontLarge"><i class="fas fa-text-height"></i></button>
                </div>
            </div>
            
            <div class="settings-section">
                <div class="settings-title">阅读主题</div>
                <div class="theme-options">
                    <div class="theme-option theme-light" id="themeLight" title="浅色模式"></div>
                    <div class="theme-option theme-sepia" id="themeSepia" title="护眼模式"></div>
                    <div class="theme-option theme-dark" id="themeDark" title="深色模式"></div>
                </div>
            </div>
        </div>
    </div>

    <!-- 格式解析引擎 - 主库 -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/turndown/7.1.2/turndown.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/rtf.js@1.1.0/dist/rtf.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/jschardet@3.0.0/dist/jschardet.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/iconv-lite@0.6.3/dist/iconv-lite.min.js"></script>

    <!-- 备用库链接 -->
    <script>
        // 检测并加载缺失的库
        function loadMissingLibraries() {
            const missingLibraries = [];
            
            // 检查Markdown解析库
            if (typeof marked === 'undefined') {
                missingLibraries.push({
                    name: 'marked',
                    url: 'https://cdn.jsdelivr.net/npm/marked@4.0.2/marked.min.js',
                    fallbackUrl: 'https://cdnjs.cloudflare.com/ajax/libs/marked/4.0.2/marked.min.js'
                });
            }
            
            // 检查EPUB解析库
            if (typeof ePub === 'undefined') {
                missingLibraries.push({
                    name: 'epub.js',
                    url: 'https://cdnjs.cloudflare.com/ajax/libs/epub.js/0.3.93/epub.min.js',
                    fallbackUrl: 'https://cdn.jsdelivr.net/npm/epub.js@0.3.93/dist/epub.min.js'
                });
            }
            
            // 检查MOBI解析库
            if (typeof mobi === 'undefined') {
                missingLibraries.push({
                    name: 'mobi.js',
                    url: 'https://cdn.jsdelivr.net/npm/mobi.js@0.2.0/dist/mobi.min.js',
                    fallbackUrl: 'https://unpkg.com/mobi.js@0.2.0/dist/mobi.min.js'
                });
            }
            
            // 检查CHM解析库
            if (typeof ChmParser === 'undefined') {
                missingLibraries.push({
                    name: 'chm-parser',
                    url: 'https://cdn.jsdelivr.net/npm/chm-parser@0.1.2/dist/chm-parser.min.js',
                    fallbackUrl: 'https://unpkg.com/chm-parser@0.1.2/dist/chm-parser.min.js'
                });
            }
            
            // 如果有缺失的库，尝试加载
            if (missingLibraries.length > 0) {
                showLibraryError(`检测到缺失的解析库: ${missingLibraries.map(lib => lib.name).join(', ')}`);
                
                // 尝试加载所有缺失的库
                const loadPromises = missingLibraries.map(lib => {
                    return new Promise((resolve, reject) => {
                        const script = document.createElement('script');
                        script.src = lib.url;
                        script.onload = () => resolve(lib.name);
                        script.onerror = () => {
                            // 尝试备用URL
                            script.src = lib.fallbackUrl;
                            script.onload = () => resolve(lib.name);
                            script.onerror = () => reject(new Error(`无法加载 ${lib.name} 库`));
                        };
                        document.head.appendChild(script);
                    });
                });
                
                // 监控加载结果
                Promise.allSettled(loadPromises).then(results => {
                    const failed = results.filter(r => r.status === 'rejected');
                    if (failed.length === 0) {
                        hideLibraryError();
                        showError('所有缺失的库已成功加载，可以继续操作');
                    } else {
                        showLibraryError(`以下库加载失败: ${failed.map(f => f.reason.message).join('; ')}`);
                    }
                });
            }
        }
        
        // 显示库加载错误
        function showLibraryError(message) {
            document.getElementById('libraryErrorMsg').textContent = message;
            document.getElementById('libraryError').classList.add('show');
        }
        
        // 隐藏库加载错误
        function hideLibraryError() {
            document.getElementById('libraryError').classList.remove('show');
        }
        
        // 页面加载完成后检查库
        window.addEventListener('load', loadMissingLibraries);
        
        // 重试加载按钮事件
        document.getElementById('retryLoadBtn').addEventListener('click', () => {
            hideLibraryError();
            showLoader('正在重新加载所需的解析库...');
            setTimeout(() => {
                loadMissingLibraries();
                hideLoader();
            }, 500);
        });
    </script>

    <script>
        // 全局状态管理
        const state = {
            currentPage: 0,
            totalPages: 0,
            docType: null,
            docContent: null,
            currentFile: null,
            zoomLevel: 100, // 百分比
            fontSize: 16,   // 像素
            theme: 'light', // light/sepia/dark
            encoding: 'auto', // 编码方式
            isDragging: false,
            startX: 0,
            activeSidebar: null,
            formats: {
                text: ['txt', 'rtf', 'csv', 'md', 'markdown', 'keb'],
                office: ['doc', 'docx', 'xls', 'xlsx', 'ppt', 'pptx', 'xdoc'],
                web: ['htm', 'html', 'chm'],
                ebook: ['pdf', 'epub', 'mobi']
            }
        };

        // DOM元素引用
        const el = {
            // 顶部栏
            docTitle: document.getElementById('docTitle'),
            newDocBtn: document.getElementById('newDocBtn'),
            encodingBtn: document.getElementById('encodingBtn'),
            encodingSelector: document.getElementById('encodingSelector'),
            tocBtn: document.getElementById('tocBtn'),
            searchBtn: document.getElementById('searchBtn'),
            bookmarkBtn: document.getElementById('bookmarkBtn'),
            settingsBtn: document.getElementById('settingsBtn'),
            
            // 侧边栏
            tocSidebar: document.getElementById('tocSidebar'),
            searchSidebar: document.getElementById('searchSidebar'),
            bookmarkSidebar: document.getElementById('bookmarkSidebar'),
            tocList: document.getElementById('tocList'),
            searchInput: document.getElementById('searchInput'),
            searchResults: document.getElementById('searchResults'),
            bookmarkList: document.getElementById('bookmarkList'),
            
            // 阅读区
            pageContainer: document.getElementById('pageContainer'),
            fileSelector: document.getElementById('fileSelector'),
            browseBtn: document.getElementById('browseBtn'),
            fileInput: document.getElementById('fileInput'),
            loader: document.getElementById('loader'),
            loaderText: document.getElementById('loaderText'),
            errorMessage: document.getElementById('errorMessage'),
            libraryError: document.getElementById('libraryError'),
            libraryErrorMsg: document.getElementById('libraryErrorMsg'),
            retryLoadBtn: document.getElementById('retryLoadBtn'),
            
            // 底部控制栏
            prevPage: document.getElementById('prevPage'),
            nextPage: document.getElementById('nextPage'),
            pageInfo: document.getElementById('pageInfo'),
            zoomIn: document.getElementById('zoomIn'),
            zoomOut: document.getElementById('zoomOut'),
            zoomReset: document.getElementById('zoomReset'),
            
            // 设置面板
            settingsPanel: document.getElementById('settingsPanel'),
            fontSmall: document.getElementById('fontSmall'),
            fontMedium: document.getElementById('fontMedium'),
            fontLarge: document.getElementById('fontLarge'),
            themeLight: document.getElementById('themeLight'),
            themeSepia: document.getElementById('themeSepia'),
            themeDark: document.getElementById('themeDark')
        };

        // 初始化应用
        function init() {
            bindEvents();
            setupDragDrop();
            setTheme('light'); // 默认主题
            
            // 再次检查库加载情况
            setTimeout(loadMissingLibraries, 1000);
        }

        // 显示错误信息
        function showError(message) {
            el.errorMessage.textContent = message;
            el.errorMessage.style.display = 'block';
            
            // 5秒后自动隐藏
            setTimeout(() => {
                el.errorMessage.style.display = 'none';
            }, 5000);
        }

        // 重置阅读器状态（用于打开新文档）
        function resetReaderState() {
            // 重置状态变量
            state.currentPage = 0;
            state.totalPages = 0;
            state.docType = null;
            state.docContent = null;
            state.currentFile = null;
            
            // 清空页面内容
            el.pageContainer.innerHTML = '';
            
            // 重置控件状态
            updatePageControls();
            el.prevPage.disabled = true;
            el.nextPage.disabled = true;
        }

        // 打开新文档
        function openNewDocument() {
            resetReaderState();
            el.fileSelector.style.display = 'flex';
            el.docTitle.textContent = '请选择文档';
            closeAllSidebars();
        }

        // 事件绑定
        function bindEvents() {
            // 打开新文档
            el.newDocBtn.addEventListener('click', openNewDocument);
            
            // 编码选择器
            el.encodingBtn.addEventListener('click', (e) => {
                el.encodingSelector.classList.toggle('open');
                e.stopPropagation(); // 防止事件冒泡导致立即关闭
            });
            
            // 点击编码选项
            document.querySelectorAll('.encoding-option').forEach(option => {
                option.addEventListener('click', (e) => {
                    const encoding = e.target.getAttribute('data-encoding');
                    state.encoding = encoding;
                    el.encodingSelector.classList.remove('open');
                    
                    // 如果有当前文件，重新加载
                    if (state.currentFile && state.formats.text.includes(state.docType)) {
                        showLoader(`正在用${e.target.textContent}重新加载...`);
                        handleFile(state.currentFile);
                    }
                });
            });
            
            // 点击空白处关闭编码选择器
            document.addEventListener('click', (e) => {
                if (!el.encodingSelector.contains(e.target) && e.target !== el.encodingBtn) {
                    el.encodingSelector.classList.remove('open');
                }
            });
            
            // 文件选择
            el.browseBtn.addEventListener('click', () => {
                el.fileInput.click();
                el.errorMessage.style.display = 'none'; // 清除错误信息
            });
            
            el.fileInput.addEventListener('change', handleFileSelect);
            
            // 侧边栏切换
            el.tocBtn.addEventListener('click', () => toggleSidebar('toc'));
            el.searchBtn.addEventListener('click', () => toggleSidebar('search'));
            el.bookmarkBtn.addEventListener('click', () => toggleSidebar('bookmark'));
            
            // 搜索功能
            el.searchInput.addEventListener('input', debounce(handleSearch, 300));
            
            // 翻页控制
            el.prevPage.addEventListener('click', goToPrevPage);
            el.nextPage.addEventListener('click', goToNextPage);
            
            // 缩放控制
            el.zoomIn.addEventListener('click', () => adjustZoom(10));
            el.zoomOut.addEventListener('click', () => adjustZoom(-10));
            el.zoomReset.addEventListener('click', () => resetZoom());
            
            // 设置面板
            el.settingsBtn.addEventListener('click', () => el.settingsPanel.classList.toggle('open'));
            el.fontSmall.addEventListener('click', () => setFontSize(14));
            el.fontMedium.addEventListener('click', () => setFontSize(16));
            el.fontLarge.addEventListener('click', () => setFontSize(18));
            el.themeLight.addEventListener('click', () => setTheme('light'));
            el.themeSepia.addEventListener('click', () => setTheme('sepia'));
            el.themeDark.addEventListener('click', () => setTheme('dark'));
            
            // 点击空白处关闭设置面板
            document.addEventListener('click', (e) => {
                if (!el.settingsPanel.contains(e.target) && e.target !== el.settingsBtn) {
                    el.settingsPanel.classList.remove('open');
                }
            });
            
            // 鼠标滑动翻页
            el.pageContainer.addEventListener('mousedown', startDrag);
            document.addEventListener('mousemove', handleDrag);
            document.addEventListener('mouseup', endDrag);
            
            // 触摸滑动翻页 (移动设备)
            el.pageContainer.addEventListener('touchstart', (e) => {
                startDrag({ clientX: e.touches[0].clientX });
            });
            document.addEventListener('touchmove', (e) => {
                handleDrag({ clientX: e.touches[0].clientX });
            });
            document.addEventListener('touchend', endDrag);
            
            // 键盘翻页
            document.addEventListener('keydown', (e) => {
                if (e.key === 'ArrowLeft') goToPrevPage();
                if (e.key === 'ArrowRight') goToNextPage();
                if (e.key === 'Escape') closeAllSidebars();
            });
        }

        // 拖放功能设置
        function setupDragDrop() {
            const dropArea = el.fileSelector;
            
            ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                dropArea.addEventListener(eventName, preventDefaults, false);
            });
            
            function preventDefaults(e) {
                e.preventDefault();
                e.stopPropagation();
            }
            
            ['dragenter', 'dragover'].forEach(eventName => {
                dropArea.addEventListener(eventName, highlight, false);
            });
            
            ['dragleave', 'drop'].forEach(eventName => {
                dropArea.addEventListener(eventName, unhighlight, false);
            });
            
            function highlight() {
                dropArea.style.border = '2px dashed var(--primary-color)';
                dropArea.style.backgroundColor = 'rgba(76, 175, 128, 0.05)';
            }
            
            function unhighlight() {
                dropArea.style.border = 'none';
                dropArea.style.backgroundColor = '';
            }
            
            dropArea.addEventListener('drop', handleDrop, false);
            
            function handleDrop(e) {
                const dt = e.dataTransfer;
                const file = dt.files[0];
                if (file) {
                    el.errorMessage.style.display = 'none'; // 清除错误信息
                    handleFile(file);
                }
            }
        }

        // 文件处理
        function handleFileSelect(e) {
            if (e.target.files.length) {
                handleFile(e.target.files[0]);
            }
        }

        function handleFile(file) {
            // 保存当前文件引用，用于重新加载
            state.currentFile = file;
            
            // 显示加载状态
            showLoader(`正在处理 ${file.name}...`);
            el.fileSelector.style.display = 'none';
            el.docTitle.textContent = file.name;
            
            const ext = getFileExtension(file.name).toLowerCase();
            state.docType = ext;
            
            // 验证文件格式
            let isSupported = false;
            Object.values(state.formats).forEach(formatGroup => {
                if (formatGroup.includes(ext)) {
                    isSupported = true;
                }
            });
            
            if (!isSupported) {
                hideLoader();
                el.fileSelector.style.display = 'flex';
                showError(`不支持的文件格式: ${ext}`);
                return;
            }
            
            // 检查所需的库是否已加载
            if (ext === 'epub' && typeof ePub === 'undefined') {
                hideLoader();
                showLibraryError('EPUB解析库未加载，请点击重试按钮加载所需库');
                return;
            }
            
            if (['md', 'markdown'].includes(ext) && typeof marked === 'undefined') {
                hideLoader();
                showLibraryError('Markdown解析库未加载，请点击重试按钮加载所需库');
                return;
            }
            
            if (ext === 'chm' && typeof ChmParser === 'undefined') {
                hideLoader();
                showLibraryError('CHM解析库未加载，请点击重试按钮加载所需库');
                return;
            }
            
            // 根据文件类型选择解析器
            try {
                if (state.formats.text.includes(ext)) {
                    parseTextFile(file);
                } else if (state.formats.office.includes(ext)) {
                    parseOfficeFile(file, ext);
                } else if (state.formats.web.includes(ext)) {
                    parseWebFile(file, ext);
                } else if (state.formats.ebook.includes(ext)) {
                    parseEbookFile(file, ext);
                }
            } catch (err) {
                console.error('文件处理错误:', err);
                hideLoader();
                el.fileSelector.style.display = 'flex';
                showError(`处理文件时出错: ${err.message || '未知错误'}`);
            }
        }

        // 文本类文件解析 (TXT/RTF/CSV/MD/KEB等)
        function parseTextFile(file) {
            const reader = new FileReader();
            
            // 显示具体处理状态
            showLoader(`正在解析 ${file.name}...`);
            
            if (state.docType === 'rtf') {
                reader.onload = (e) => {
                    try {
                        // 检查RTF解析库是否加载
                        if (typeof RTFJS === 'undefined') {
                            throw new Error('RTF解析库未加载，请刷新页面重试');
                        }
                        
                        const rtf = new RTFJS.Document(e.target.result);
                        const text = rtf.render().textContent;
                        renderTextContent(text);
                    } catch (err) {
                        console.error('RTF解析错误:', err);
                        hideLoader();
                        el.fileSelector.style.display = 'flex';
                        showError(`解析RTF文件失败: ${err.message}`);
                    }
                };
                reader.onerror = handleReaderError;
                reader.readAsBinaryString(file);
            } else if (['md', 'markdown'].includes(state.docType)) {
                // Markdown文件解析
                reader.onload = (e) => {
                    try {
                        if (typeof marked === 'undefined') {
                            throw new Error('Markdown解析库未加载，请点击重试按钮');
                        }
                        
                        // 使用指定编码解码
                        let content = decodeText(e.target.result, file);
                        renderMarkdownContent(content);
                    } catch (err) {
                        console.error('Markdown解析错误:', err);
                        hideLoader();
                        el.fileSelector.style.display = 'flex';
                        showError(`解析Markdown文件失败: ${err.message}`);
                    }
                };
                reader.onerror = handleReaderError;
                reader.readAsArrayBuffer(file);
            } else if (state.docType === 'keb') {
                // KEB格式解析
                reader.onload = (e) => {
                    try {
                        // KEB格式通常是特殊编码的文本文件
                        let content = decodeText(e.target.result, file);
                        // 有些KEB文件可能包含简单标记，这里做基本处理
                        content = content.replace(/\x07/g, '\n\n'); // 替换特定控制字符为换行
                        renderTextContent(content);
                    } catch (err) {
                        console.error('KEB解析错误:', err);
                        hideLoader();
                        el.fileSelector.style.display = 'flex';
                        showError(`解析KEB文件失败: ${err.message}`);
                    }
                };
                reader.onerror = handleReaderError;
                reader.readAsArrayBuffer(file);
            } else {
                // 其他文本文件，使用编码检测
                reader.onload = (e) => {
                    try {
                        let content = decodeText(e.target.result, file);
                        renderTextContent(content);
                    } catch (err) {
                        console.error('文本解析错误:', err);
                        hideLoader();
                        el.fileSelector.style.display = 'flex';
                        showError(`解析文本文件失败: ${err.message}`);
                    }
                };
                reader.onerror = handleReaderError;
                reader.readAsArrayBuffer(file);
            }
        }

        // 解码文本内容（增强版，修复乱码问题）
        function decodeText(arrayBuffer, file) {
            try {
                const buffer = new Uint8Array(arrayBuffer);
                
                // 检查是否为UTF-8 BOM
                if (buffer.length >= 3 && buffer[0] === 0xEF && buffer[1] === 0xBB && buffer[2] === 0xBF) {
                    return new TextDecoder('utf-8').decode(buffer.subarray(3));
                }
                
                // 检查是否为UTF-16 BE BOM
                if (buffer.length >= 2 && buffer[0] === 0xFE && buffer[1] === 0xFF) {
                    return new TextDecoder('utf-16be').decode(buffer.subarray(2));
                }
                
                // 检查是否为UTF-16 LE BOM
                if (buffer.length >= 2 && buffer[0] === 0xFF && buffer[1] === 0xFE) {
                    return new TextDecoder('utf-16le').decode(buffer.subarray(2));
                }
                
                if (state.encoding === 'auto') {
                    // 自动检测编码，增加可信度检查
                    const detection = jschardet.detect(buffer);
                    
                    // 如果可信度低，尝试常见编码
                    if (!detection.encoding || detection.confidence < 0.5) {
                        // 尝试常见中文编码
                        const possibleEncodings = ['gb18030', 'gbk', 'utf8', 'big5'];
                        for (const encoding of possibleEncodings) {
                            try {
                                return iconv.decode(buffer, encoding);
                            } catch (e) {
                                continue;
                            }
                        }
                        // 如果所有尝试都失败，使用UTF-8并允许替换错误
                        return new TextDecoder('utf-8', { fatal: false, ignoreBOM: true }).decode(buffer);
                    }
                    
                    // 处理编码别名
                    const encodingMap = {
                        'windows-1252': 'utf8',
                        'iso-8859-1': 'utf8',
                        'utf-8': 'utf8',
                        'GB2312': 'gb2312',
                        'GBK': 'gbk',
                        'GB18030': 'gb18030'
                    };
                    
                    const finalEncoding = encodingMap[detection.encoding] || detection.encoding.toLowerCase();
                    console.log(`自动检测到编码: ${finalEncoding} (可信度: ${(detection.confidence * 100).toFixed(1)}%)`);
                    
                    // 尝试用检测到的编码解码
                    return iconv.decode(buffer, finalEncoding);
                } else {
                    // 使用指定编码
                    return iconv.decode(buffer, state.encoding);
                }
            } catch (err) {
                console.warn(`使用${state.encoding || '自动检测'}编码解码失败，尝试其他编码:`, err);
                
                // 多编码尝试回退机制
                const fallbackEncodings = [
                    'utf8', 
                    'gb18030', 
                    'gbk', 
                    'gb2312',
                    'big5',
                    'shift_jis',
                    'euc-kr'
                ];
                
                // 从回退列表中尝试其他编码
                for (const encoding of fallbackEncodings) {
                    if (encoding === state.encoding) continue; // 跳过已经尝试过的编码
                    
                    try {
                        const result = iconv.decode(new Uint8Array(arrayBuffer), encoding);
                        showError(`自动修复编码: 使用${encoding}编码显示`);
                        return result;
                    } catch (e) {
                        continue;
                    }
                }
                
                // 最终尝试：使用UTF-8并替换错误字符
                try {
                    return new TextDecoder('utf-8', { fatal: false }).decode(new Uint8Array(arrayBuffer));
                } catch (e) {
                    console.error('所有编码尝试均失败:', e);
                    throw new Error(`无法解码文件内容，请尝试在编码设置中手动选择合适的编码格式。错误: ${e.message}`);
                }
            }
        }

        // Office文件解析 (DOCX/XLSX等)
        function parseOfficeFile(file, ext) {
            const reader = new FileReader();
            
            // 显示具体处理状态
            showLoader(`正在解析 ${file.name}...`);
            
            reader.onload = (e) => {
                try {
                    if (ext === 'docx') {
                        // DOCX解析
                        if (typeof JSZip === 'undefined') {
                            throw new Error('JSZip库未加载，请刷新页面重试');
                        }
                        
                        JSZip.loadAsync(e.target.result).then(zip => {
                            // 检查是否存在document.xml
                            const docFile = zip.file('word/document.xml');
                            if (!docFile) {
                                throw new Error('无法找到文档内容，可能是损坏的文件');
                            }
                            
                            docFile.async('text').then(content => {
                                const parser = new DOMParser();
                                const xmlDoc = parser.parseFromString(content, 'text/xml');
                                const textNodes = xmlDoc.getElementsByTagNameNS('http://schemas.openxmlformats.org/wordprocessingml/2006/main', 't');
                                
                                let result = '';
                                for (let i = 0; i < textNodes.length; i++) {
                                    result += textNodes[i].textContent + ' ';
                                }
                                
                                renderTextContent(result);
                            }).catch(err => {
                                throw new Error(`解析文档内容失败: ${err.message}`);
                            });
                        }).catch(err => {
                            throw new Error(`解压DOCX文件失败: ${err.message}`);
                        });
                    } else if (ext === 'xlsx') {
                        // XLSX解析
                        if (typeof XLSX === 'undefined') {
                            throw new Error('XLSX库未加载，请刷新页面重试');
                        }
                        
                        const data = new Uint8Array(e.target.result);
                        const workbook = XLSX.read(data, { type: 'array' });
                        const firstSheetName = workbook.SheetNames[0];
                        if (!firstSheetName) {
                            throw new Error('表格文件中没有找到工作表');
                        }
                        
                        const firstSheet = workbook.Sheets[firstSheetName];
                        const text = XLSX.utils.sheet_to_csv(firstSheet);
                        renderTextContent(text);
                    } else {
                        // 其他Office格式
                        showLoader(`正在转换 ${file.name}...`);
                        setTimeout(() => {
                            renderTextContent(`[${ext}文件内容预览]\n\n文件名称: ${file.name}\n文件大小: ${formatFileSize(file.size)}\n\n提示: 该格式仅支持基础内容显示`);
                        }, 800);
                    }
                } catch (err) {
                    console.error('Office文件解析错误:', err);
                    hideLoader();
                    el.fileSelector.style.display = 'flex';
                    showError(`解析${ext.toUpperCase()}文件失败: ${err.message}`);
                }
            };
            
            reader.onerror = handleReaderError;
            reader.readAsArrayBuffer(file);
        }

        // 网页文件解析 (HTML/HTM/CHM)
        function parseWebFile(file, ext) {
            const reader = new FileReader();
            
            // 显示具体处理状态
            showLoader(`正在解析 ${file.name}...`);
            
            if (ext === 'chm') {
                // CHM格式解析
                reader.onload = (e) => {
                    try {
                        if (typeof ChmParser === 'undefined') {
                            throw new Error('CHM解析库未加载，请点击重试按钮');
                        }
                        
                        const arrayBuffer = e.target.result;
                        const chmParser = new ChmParser(arrayBuffer);
                        
                        // 解析CHM内容
                        chmParser.parse().then(() => {
                            // 获取目录和首页内容
                            const topics = chmParser.getTopics();
                            const firstTopic = topics[0];
                            
                            if (firstTopic) {
                                // 渲染目录
                                renderChmToc(topics);
                                
                                // 获取并渲染首页内容
                                return chmParser.getTopicContent(firstTopic.path)
                                    .then(htmlContent => {
                                        // HTML转文本
                                        if (typeof TurndownService === 'undefined') {
                                            throw new Error('HTML转换库未加载');
                                        }
                                        
                                        const turndownService = new TurndownService();
                                        const text = turndownService.turndown(htmlContent);
                                        renderTextContent(text);
                                    });
                            } else {
                                throw new Error('CHM文件中未找到内容');
                            }
                        }).catch(err => {
                            throw new Error(`CHM解析失败: ${err.message}`);
                        });
                    } catch (err) {
                        console.error('CHM解析错误:', err);
                        hideLoader();
                        el.fileSelector.style.display = 'flex';
                        showError(`解析CHM文件失败: ${err.message}`);
                    }
                };
            } else {
                // HTML/HTM解析
                reader.onload = (e) => {
                    try {
                        if (typeof TurndownService === 'undefined') {
                            throw new Error('Turndown库未加载，请刷新页面重试');
                        }
                        
                        // 处理编码
                        let htmlContent = decodeText(e.target.result, file);
                        const turndownService = new TurndownService();
                        const text = turndownService.turndown(htmlContent); // HTML转Markdown
                        renderTextContent(text);
                    } catch (err) {
                        console.error('HTML解析错误:', err);
                        hideLoader();
                        el.fileSelector.style.display = 'flex';
                        showError(`解析HTML文件失败: ${err.message}`);
                    }
                };
            }
            
            reader.onerror = handleReaderError;
            reader.readAsArrayBuffer(file);
        }

        // 渲染CHM目录
        function renderChmToc(topics) {
            el.tocList.innerHTML = '';
            
            if (!topics || topics.length === 0) {
                el.tocList.innerHTML = '<div style="color: #999; padding: 10px;">无目录信息</div>';
                return;
            }
            
            // 简单处理CHM目录结构
            topics.forEach(topic => {
                if (!topic.title || topic.title.trim() === '') return;
                
                const tocItem = document.createElement('div');
                tocItem.className = 'toc-item';
                tocItem.textContent = topic.title;
                tocItem.style.paddingLeft = `${(topic.level || 0) * 15}px`; // 根据层级缩进
                tocItem.addEventListener('click', () => {
                    if (state.currentFile && state.docType === 'chm') {
                        showLoader(`加载 ${topic.title}...`);
                        
                        // 获取并显示选中主题的内容
                        const arrayBuffer = state.chmArrayBuffer;
                        const chmParser = new ChmParser(arrayBuffer);
                        
                        chmParser.parse().then(() => {
                            chmParser.getTopicContent(topic.path)
                                .then(htmlContent => {
                                    const turndownService = new TurndownService();
                                    const text = turndownService.turndown(htmlContent);
                                    renderTextContent(text);
                                    hideLoader();
                                    
                                    // 高亮当前选中项
                                    document.querySelectorAll('.toc-item').forEach(el => {
                                        el.classList.remove('active');
                                    });
                                    tocItem.classList.add('active');
                                })
                                .catch(err => {
                                    hideLoader();
                                    showError(`加载内容失败: ${err.message}`);
                                });
                        });
                    }
                });
                el.tocList.appendChild(tocItem);
            });
        }

        // 电子书解析 (PDF/EPUB/MOBI)
        function parseEbookFile(file, ext) {
            // 显示具体处理状态
            showLoader(`正在加载 ${file.name}...`);
            
            if (ext === 'pdf') {
                try {
                    if (typeof pdfjsLib === 'undefined') {
                        throw new Error('PDF解析库未加载，请刷新页面重试');
                    }
                    
                    // 设置PDF.js工作器
                    pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js';
                    
                    const fileURL = URL.createObjectURL(file);
                    pdfjsLib.getDocument(fileURL).promise.then(pdf => {
                        state.docContent = pdf;
                        state.totalPages = pdf.numPages;
                        renderPdfPage(1); // PDF页码从1开始
                        updatePageControls();
                        hideLoader();
                    }).catch(err => {
                        throw new Error(`PDF加载失败: ${err.message || '未知错误'}`);
                    });
                } catch (err) {
                    console.error('PDF解析错误:', err);
                    hideLoader();
                    el.fileSelector.style.display = 'flex';
                    showError(err.message);
                }
            } else if (ext === 'epub') {
                try {
                    if (typeof ePub === 'undefined') {
                        throw new Error('EPUB解析库未加载，请点击重试按钮');
                    }
                    
                    const fileURL = URL.createObjectURL(file);
                    const book = ePub(fileURL);
                    state.docContent = book;
                    
                    book.loaded.metadata.then(() => {
                        // 渲染目录
                        book.loaded.navigation.then(toc => {
                            renderToc(toc);
                        }).catch(err => {
                            console.warn('解析目录失败:', err);
                        });
                        
                        // 渲染内容
                        book.renderTo(el.pageContainer, {
                            width: '100%',
                            height: '100%'
                        });
                        
                        book.ready.then(() => {
                            state.totalPages = book.spine.length;
                            updatePageControls();
                            hideLoader();
                        }).catch(err => {
                            throw new Error(`EPUB渲染失败: ${err.message}`);
                        });
                    }).catch(err => {
                        throw new Error(`EPUB加载失败: ${err.message}`);
                    });
                } catch (err) {
                    console.error('EPUB解析错误:', err);
                    hideLoader();
                    el.fileSelector.style.display = 'flex';
                    showError(err.message);
                }
            } else if (ext === 'mobi') {
                try {
                    if (typeof mobi === 'undefined') {
                        throw new Error('MOBI解析库未加载，请点击重试按钮');
                    }
                    
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        try {
                            const arrayBuffer = e.target.result;
                            const book = new mobi.Mobi(arrayBuffer);
                            const textContent = book.getRawTextContent();
                            
                            // MOBI可能包含HTML标签，简单处理
                            const plainText = textContent.replace(/<[^>]+>/g, '');
                            renderTextContent(plainText);
                        } catch (err) {
                            throw new Error(`MOBI解析失败: ${err.message}`);
                        }
                    };
                    
                    reader.onerror = handleReaderError;
                    reader.readAsArrayBuffer(file);
                } catch (err) {
                    console.error('MOBI解析错误:', err);
                    hideLoader();
                    el.fileSelector.style.display = 'flex';
                    showError(err.message);
                }
            }
        }

        // 处理FileReader错误
        function handleReaderError(event) {
            hideLoader();
            el.fileSelector.style.display = 'flex';
            
            let errorMsg = '读取文件时发生错误';
            switch(event.target.error.code) {
                case event.target.error.NOT_FOUND_ERR:
                    errorMsg = '文件未找到';
                    break;
                case event.target.error.NOT_READABLE_ERR:
                    errorMsg = '文件不可读，请检查文件权限';
                    break;
                case event.target.error.ABORT_ERR:
                    errorMsg = '操作已取消';
                    break;
                default:
                    errorMsg = `错误代码: ${event.target.error.code}`;
            }
            
            showError(errorMsg);
        }

        // 渲染文本内容 (带自动分页)
        function renderTextContent(content) {
            state.docContent = content;
            
            // 简单分页逻辑
            const pageSize = 3000; // 每页字符数
            state.totalPages = Math.ceil(content.length / pageSize);
            state.currentPage = 0;
            
            // 渲染当前页
            renderCurrentTextPage();
            updatePageControls();
            hideLoader();
        }

        // 渲染Markdown内容
        function renderMarkdownContent(content) {
            state.docContent = content;
            
            // Markdown内容通常结构清晰，使用更大的分页尺寸
            const pageSize = 8000; // 每页字符数
            state.totalPages = Math.ceil(content.length / pageSize);
            state.currentPage = 0;
            
            // 渲染当前页
            renderCurrentMarkdownPage();
            updatePageControls();
            hideLoader();
        }

        // 渲染当前文本页
        function renderCurrentTextPage() {
            el.pageContainer.innerHTML = '';
            const pageSize = 3000;
            const start = state.currentPage * pageSize;
            const end = start + pageSize;
            const pageContent = state.docContent.slice(start, end);
            
            const page = document.createElement('div');
            page.className = 'page';
            
            const content = document.createElement('div');
            content.className = 'page-content';
            content.textContent = pageContent;
            
            page.appendChild(content);
            el.pageContainer.appendChild(page);
            
            // 应用当前样式
            applyCurrentStyle();
        }

        // 渲染当前Markdown页
        function renderCurrentMarkdownPage() {
            el.pageContainer.innerHTML = '';
            const pageSize = 8000;
            const start = state.currentPage * pageSize;
            const end = start + pageSize;
            const pageContent = state.docContent.slice(start, end);
            
            const page = document.createElement('div');
            page.className = 'page';
            
            const content = document.createElement('div');
            content.className = 'page-content markdown-content';
            content.innerHTML = marked.parse(pageContent); // 将Markdown转换为HTML
            
            page.appendChild(content);
            el.pageContainer.appendChild(page);
            
            // 应用当前样式
            applyCurrentStyle();
        }

        // 渲染PDF页面
        function renderPdfPage(pageNum) {
            el.pageContainer.innerHTML = '';
            state.currentPage = pageNum - 1; // 转换为0基索引
            
            state.docContent.getPage(pageNum).then(page => {
                const viewport = page.getViewport({ scale: state.zoomLevel / 100 });
                
                const canvas = document.createElement('canvas');
                const context = canvas.getContext('2d');
                canvas.height = viewport.height;
                canvas.width = viewport.width;
                
                const pageEl = document.createElement('div');
                pageEl.className = 'page';
                pageEl.style.display = 'flex';
                pageEl.style.alignItems = 'center';
                pageEl.style.justifyContent = 'center';
                pageEl.appendChild(canvas);
                
                el.pageContainer.appendChild(pageEl);
                
                const renderContext = {
                    canvasContext: context,
                    viewport: viewport
                };
                
                // 渲染PDF页面
                page.render(renderContext).promise.then(() => {
                    // 渲染完成
                }).catch(err => {
                    console.error('PDF渲染错误:', err);
                    showError(`PDF页面渲染失败: ${err.message}`);
                });
            }).catch(err => {
                console.error('获取PDF页面错误:', err);
                showError(`无法加载PDF页面: ${err.message}`);
            });
        }

        // 渲染目录
        function renderToc(toc) {
            el.tocList.innerHTML = '';
            
            if (!toc || toc.length === 0) {
                el.tocList.innerHTML = '<div style="color: #999; padding: 10px;">无目录信息</div>';
                return;
            }
            
            function addTocItems(items, parent) {
                items.forEach(item => {
                    const tocItem = document.createElement('div');
                    tocItem.className = 'toc-item';
                    tocItem.textContent = item.label || '未知章节';
                    tocItem.addEventListener('click', () => {
                        if (state.docType === 'epub' && state.docContent) {
                            state.docContent.goTo(item.href);
                            // 更新当前页码
                            state.currentPage = item.index || 0;
                            updatePageControls();
                        }
                        // 高亮当前选中项
                        document.querySelectorAll('.toc-item').forEach(el => {
                            el.classList.remove('active');
                        });
                        tocItem.classList.add('active');
                    });
                    parent.appendChild(tocItem);
                    
                    if (item.subitems && item.subitems.length) {
                        const sublist = document.createElement('div');
                        sublist.style.paddingLeft = '15px';
                        parent.appendChild(sublist);
                        addTocItems(item.subitems, sublist);
                    }
                });
            }
            
            addTocItems(toc, el.tocList);
        }

        // 翻页控制
        function goToPrevPage() {
            if (state.currentPage <= 0) return;
            
            state.currentPage--;
            updatePageDisplay();
            updatePageControls();
        }

        function goToNextPage() {
            if (state.currentPage >= state.totalPages - 1) return;
            
            state.currentPage++;
            updatePageDisplay();
            updatePageControls();
        }

        // 更新页面显示
        function updatePageDisplay() {
            switch(state.docType) {
                case 'pdf':
                    renderPdfPage(state.currentPage + 1);
                    break;
                case 'epub':
                    if (state.docContent) {
                        state.docContent.goTo(state.currentPage);
                    }
                    break;
                case 'md':
                case 'markdown':
                    renderCurrentMarkdownPage();
                    break;
                default:
                    renderCurrentTextPage();
            }
        }

        // 更新分页控件状态
        function updatePageControls() {
            el.prevPage.disabled = state.currentPage <= 0;
            el.nextPage.disabled = state.currentPage >= state.totalPages - 1;
            el.pageInfo.textContent = `第 ${state.currentPage + 1} 页 / 共 ${state.totalPages} 页`;
        }

        // 缩放控制
        function adjustZoom(step) {
            state.zoomLevel = Math.max(50, Math.min(200, state.zoomLevel + step));
            applyZoom();
        }

        function resetZoom() {
            state.zoomLevel = 100;
            applyZoom();
        }

        function applyZoom() {
            el.pageContainer.style.transform = `scale(${state.zoomLevel / 100})`;
            el.pageContainer.style.transformOrigin = 'center center';
        }

        // 字体大小设置
        function setFontSize(size) {
            state.fontSize = size;
            const contentEl = document.querySelector('.page-content');
            if (contentEl) {
                contentEl.style.fontSize = `${size}px`;
            }
        }

        // 主题设置
        function setTheme(theme) {
            state.theme = theme;
            document.body.className = '';
            
            if (theme === 'dark') {
                document.body.classList.add('dark-mode');
            } else if (theme === 'sepia') {
                document.body.classList.add('reading-mode-sepia');
            }
            
            // 更新主题选择器状态
            [el.themeLight, el.themeSepia, el.themeDark].forEach(el => {
                el.classList.remove('active');
            });
            
            if (theme === 'light') el.themeLight.classList.add('active');
            else if (theme === 'sepia') el.themeSepia.classList.add('active');
            else if (theme === 'dark') el.themeDark.classList.add('active');
        }

        // 应用当前样式
        function applyCurrentStyle() {
            setFontSize(state.fontSize);
            setTheme(state.theme);
            applyZoom();
        }

        // 侧边栏控制
        function toggleSidebar(type) {
            // 关闭所有侧边栏
            closeAllSidebars();
            
            // 如果点击的是当前激活的侧边栏，则关闭
            if (state.activeSidebar === type) {
                state.activeSidebar = null;
                return;
            }
            
            // 打开目标侧边栏
            state.activeSidebar = type;
            if (type === 'toc') el.tocSidebar.classList.add('open');
            else if (type === 'search') el.searchSidebar.classList.add('open');
            else if (type === 'bookmark') el.bookmarkSidebar.classList.add('open');
        }

        function closeAllSidebars() {
            el.tocSidebar.classList.remove('open');
            el.searchSidebar.classList.remove('open');
            el.bookmarkSidebar.classList.remove('open');
        }

        // 搜索功能
        function handleSearch() {
            const keyword = el.searchInput.value.trim();
            if (!keyword || !state.docContent) {
                el.searchResults.innerHTML = '<div style="padding:10px; color:#999;">请输入搜索内容</div>';
                return;
            }
            
            // 简单搜索实现
            let content = typeof state.docContent === 'string' 
                ? state.docContent 
                : (state.docContent.text || '');
            
            const results = [];
            const regex = new RegExp(`(.{0,30})${keyword}(.{0,30})`, 'gi');
            let match;
            
            while (match = regex.exec(content)) {
                results.push({
                    text: match[0],
                    position: match.index
                });
            }
            
            renderSearchResults(results, keyword);
        }

        // 渲染搜索结果
        function renderSearchResults(results, keyword) {
            if (results.length === 0) {
                el.searchResults.innerHTML = '<div style="padding:10px; color:#999;">未找到匹配内容</div>';
                return;
            }
            
            el.searchResults.innerHTML = '';
            results.forEach(result => {
                const item = document.createElement('div');
                item.className = 'result-item';
                
                const text = document.createElement('div');
                text.className = 'result-text';
                // 高亮关键词
                text.innerHTML = result.text.replace(
                    new RegExp(keyword, 'gi'), 
                    '<span class="result-highlight">$&</span>'
                );
                
                item.appendChild(text);
                item.addEventListener('click', () => {
                    // 跳转到匹配位置
                    const pageSize = ['md', 'markdown'].includes(state.docType) ? 8000 : 3000;
                    state.currentPage = Math.floor(result.position / pageSize);
                    updatePageDisplay();
                    updatePageControls();
                    closeAllSidebars();
                });
                
                el.searchResults.appendChild(item);
            });
        }

        // 鼠标滑动翻页
        function startDrag(e) {
            state.isDragging = true;
            state.startX = e.clientX;
        }

        function handleDrag(e) {
            if (!state.isDragging) return;
            // 滑动视觉反馈可以在这里添加
        }

        function endDrag(e) {
            if (!state.isDragging) return;
            
            const deltaX = e.clientX - state.startX;
            if (Math.abs(deltaX) > 50) { // 滑动阈值
                if (deltaX < 0) goToNextPage(); // 向左滑 -> 下一页
                else goToPrevPage(); // 向右滑 -> 上一页
            }
            
            state.isDragging = false;
        }

        // 工具函数
        function getFileExtension(filename) {
            return filename.split('.').pop().toLowerCase() || '';
        }

        function showLoader(text) {
            el.loader.classList.add('show');
            el.loaderText.textContent = text || '正在加载...';
        }

        function hideLoader() {
            el.loader.classList.remove('show');
        }

        function debounce(func, wait) {
            let timeout;
            return function(...args) {
                clearTimeout(timeout);
                timeout = setTimeout(() => func.apply(this, args), wait);
            };
        }

        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }

        // 启动应用
        window.addEventListener('DOMContentLoaded', init);
    </script>
</body>
</html> 

### 主要改进说明

1. **新增格式支持**
   - **CHM格式**：引入`chm-parser`库，支持微软编译HTML帮助文件的解析和目录导航
   - **KEB格式**：通过增强的编码处理支持KEB格式文档，处理特殊控制字符并优化显示

2. **修复解析库加载问题**
   - 新增库加载检测系统，页面加载后自动检查所需库
   - 为每个关键库提供主URL和备用URL，提高加载成功率
   - 添加专门的库加载错误提示面板，提供重试功能
   - 修复了Markdown和EPUB解析库未加载的错误，增加了更健壮的库检测和加载机制

3. **增强TXT文档编码处理**
   - 改进自动编码检测算法，增加可信度判断
   - 新增更多编码选项（包括GB2312、BIG5等）
   - 实现多编码尝试回退机制，当一种编码失败时自动尝试其他常见编码
   - 处理各种BOM（字节顺序标记），包括UTF-8、UTF-16 BE/LE
   - 编码转换失败时提供更明确的错误提示和解决方案

4. **用户体验优化**
   - 在支持的格式列表中添加了CHM和KEB格式标签
   - 改进了编码选择器，增加更多语言编码选项
   - 为CHM文档添加了目录导航功能
   - 优化了解析错误提示，提供更具体的问题原因和解决建议

这些改进解决了之前版本中的主要问题，特别是编码相关的乱码问题和解析库加载失败的问题，同时扩展了对CHM和KEB格式的支持。