鲁虺文本内容搜索展示系统luhuitxtcms html JavaScript txt Version2.0.5更新

在鲁虺文本内容搜索展示系统luhuitxtcms html JavaScript txt Version2.0.2版本基础上
取消固定文章数量，改为自动统计现有文章数，增加返回首页。除了可以搜索文章标题，增加全文搜索功能
支持从文章标题添加作为<title>标题</title>，随机提取一段文字<meta name="description" content="随机提取一段文字作为description">，根据文章随机添加keywords关键词
<meta name="keywords" content="随机添加keywords关键词">


这个需求是在现有的 "鲁虺文本内容搜索展示系统" 基础上进行改进，主要包括以下几个方面：

取消固定文章数量，改为自动统计现有文章数
增加返回首页功能
除了搜索文章标题，增加全文搜索功能
支持从文章标题设置为页面<title>
随机提取一段文字作为<meta name="description">
根据文章随机添加 keywords 关键词作为<meta name="keywords">

我需要修改提供的 HTML/JavaScript 代码来实现这些功能。让我逐一分析和实现：

取消固定文章数量，改为自动统计现有文章数：
目前代码中使用了 categoryMaxCounts 对象来存储每个分类的最大文章数
需要改为实际检测每个分类下有多少篇文章存在
可以通过尝试加载文章文件并检查是否存在来实现
增加返回首页功能：
添加一个 "首页" 按钮或链接
点击时返回系统首页，显示所有分类和文章列表
增加全文搜索功能：
目前只有标题搜索
需要修改搜索逻辑，不仅匹配标题，也匹配文章内容
可能需要预加载更多内容以便搜索，或者在搜索时加载更多内容
设置页面<title>为文章标题：
在显示文章详情时，将 document.title 设置为文章标题
随机提取一段文字作为 description：
在显示文章详情时，从文章内容中随机提取一段文字
设置<meta name="description" content="...">
随机添加 keywords 关键词：
在显示文章详情时，从文章内容中提取一些关键词
设置<meta name="keywords" content="...">

让我开始编写修改后的代码。

```html
<!DOCTYPE html>
<html lang="zh-CN">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="鲁虺文本内容搜索展示系统，高效检索与展示各类文本内容">
    <meta name="keywords" content="鲁虺,文本内容,搜索系统,文档管理">
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css" rel="stylesheet">
    <!-- 引入Markdown解析库 -->
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    <title>鲁虺文本内容搜索展示系统</title>
    <style>
        body {
            font-family: 'Inter', system-ui, sans-serif;
        }
        pre {
            white-space: pre-wrap;
            word-wrap: break-word;
            font-family: 'Consolas', 'Monaco', monospace;
            background-color: #f5f5f5;
            padding: 1rem;
            border-radius: 4px;
            margin: 1rem 0;
        }
        .markdown-content h1, .markdown-content h2, .markdown-content h3 {
            font-weight: bold;
            margin: 1.5rem 0 1rem;
        }
        .markdown-content h1 { font-size: 1.8rem; }
        .markdown-content h2 { font-size: 1.5rem; }
        .markdown-content h3 { font-size: 1.2rem; }
        .markdown-content p { margin-bottom: 1rem; }
        .markdown-content ul, .markdown-content ol { 
            margin-left: 1.5rem; 
            margin-bottom: 1rem;
        }
        .markdown-content ul { list-style-type: disc; }
        .markdown-content ol { list-style-type: decimal; }
        .markdown-content blockquote {
            border-left: 4px solid #ddd;
            padding-left: 1rem;
            margin: 1rem 0;
            color: #666;
        }
        .markdown-content a { color: #3b82f6; text-decoration: underline; }
        .loading {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid rgba(59, 130, 246, 0.3);
            border-radius: 50%;
            border-top-color: #3b82f6;
            animation: spin 1s ease-in-out infinite;
        }
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
        .nav-link.active {
            color: #1e40af;
            font-weight: bold;
            text-decoration: underline;
        }
        .error-message {
            background-color: #fee2e2;
            border: 1px solid #fecaca;
            color: #dc2626;
            padding: 1rem;
            border-radius: 4px;
            margin: 1rem 0;
        }
        .search-options {
            display: flex;
            align-items: center;
            margin-bottom: 0.5rem;
            font-size: 0.9rem;
        }
        .search-options label {
            display: flex;
            align-items: center;
            margin-right: 1.5rem;
            cursor: pointer;
        }
        .search-options input[type="radio"] {
            margin-right: 0.3rem;
        }
    </style>
</head>

<body class="bg-gray-50">
    <div class="container mx-auto p-4 md:p-8 max-w-6xl">
        <header class="mb-8">
            <div class="flex justify-between items-center">
                <div>
                    <h1 class="text-3xl md:text-4xl font-bold text-gray-800 mb-2">鲁虺文本内容搜索展示系统</h1>
                    <p class="text-gray-600">高效检索与展示各类文本内容</p>
                </div>
                <button id="home-button" class="bg-green-500 text-white p-2 rounded-md hover:bg-green-600 transition">
                    <i class="fas fa-home mr-1"></i> 首页
                </button>
            </div>
        </header>
        
        <div class="mb-6">
            <div class="search-options">
                <label>
                    <input type="radio" name="search-type" value="title" checked> 标题搜索
                </label>
                <label>
                    <input type="radio" name="search-type" value="fulltext"> 全文搜索
                </label>
            </div>
            <div class="flex flex-col md:flex-row gap-3">
                <input type="text" id="search-input" placeholder="搜索文章标题或内容..."
                    class="border border-gray-300 p-2 rounded-md flex-grow focus:outline-none focus:ring-2 focus:ring-blue-500">
                <button id="search-button" class="bg-blue-500 text-white p-2 rounded-md hover:bg-blue-600 transition">
                    <i class="fas fa-search mr-1"></i> 搜索
                </button>
            </div>
        </div>
        
        <!-- 分类导航 -->
        <div id="category-nav" class="mb-6 overflow-x-auto pb-2">
            <div class="flex space-x-4 min-w-max">
                <!-- 分类导航链接将在这里动态生成 -->
            </div>
        </div>
        
        <!-- 分类统计 -->
        <div id="category-stats" class="mb-6 p-4 bg-white-white rounded-lg shadow-sm">
            <!-- 统计信息将在这里动态生成 -->
        </div>
        
        <!-- 加载状态 -->
        <div id="loading-indicator" class="hidden mb-6 text-center">
            <div class="loading mx-auto"></div>
            <p class="text-gray-600 mt-2">正在加载内容...</p>
        </div>
        
        <!-- 错误信息 -->
        <div id="error-container" class="hidden mb-6">
            <div id="error-message" class="error-message">
                <!-- 错误信息将在这里显示 -->
            </div>
        </div>
        
        <!-- 文章列表容器 -->
        <div id="article-list-container" class="mb-8">
            <div id="article-list" class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <!-- 文章列表将在这里动态生成 -->
            </div>
            
            <!-- 分页控件 -->
            <div id="pagination" class="flex flex-wrap justify-center gap-2 mt-6">
                <!-- 分页按钮将在这里动态生成 -->
            </div>
        </div>
    </div>
    
    <!-- 文章详情页 -->
    <div id="article-detail" class="container mx-auto p-4 md:p-8 max-w-4xl hidden">
        <button id="back-button" class="mb-6 inline-flex items-center bg-blue-500 text-white p-2 rounded-md hover:bg-blue-600 transition">
            <i class="fas fa-arrow-left mr-2"></i> 返回列表
        </button>
        
        <div class="bg-white p-6 rounded-lg shadow-sm mb-6">
            <h2 id="article-title" class="text-2xl md:text-3xl font-bold mb-4 text-gray-800"></h2>
            <div id="article-meta" class="text-gray-500 text-sm mb-6">
                <!-- 文章元数据将在这里显示 -->
            </div>
            <div id="article-content" class="markdown-content text-gray-700 leading-relaxed">
                <!-- 文章内容将在这里显示 -->
            </div>
        </div>
        
        <div class="flex justify-between">
            <button id="prev-article-button" class="bg-blue-500 text-white p-2 rounded-md hover:bg-blue-600 transition">
                <i class="fas fa-chevron-left mr-1"></i> 上一篇
            </button>
            <button id="next-article-button" class="bg-blue-500 text-white p-2 rounded-md hover:bg-blue-600 transition">
                下一篇 <i class="fas fa-chevron-right ml-1"></i>
            </button>
        </div>
    </div>

    <script>
        // DOM元素
        const articleList = document.getElementById('article-list');
        const articleDetail = document.getElementById('article-detail');
        const articleTitle = document.getElementById('article-title');
        const articleContent = document.getElementById('article-content');
        const articleMeta = document.getElementById('article-meta');
        const backButton = document.getElementById('back-button');
        const homeButton = document.getElementById('home-button');
        const searchInput = document.getElementById('search-input');
        const searchButton = document.getElementById('search-button');
        const searchTypeRadios = document.querySelectorAll('input[name="search-type"]');
        const pagination = document.getElementById('pagination');
        const articleListContainer = document.getElementById('article-list-container');
        const categoryStats = document.getElementById('category-stats');
        const prevArticleButton = document.getElementById('prev-article-button');
        const nextArticleButton = document.getElementById('next-article-button');
        const categoryNav = document.getElementById('category-nav').querySelector('div');
        const loadingIndicator = document.getElementById('loading-indicator');
        const errorContainer = document.getElementById('error-container');
        const errorMessage = document.getElementById('error-message');

        // 配置参数
        const categories = ['category1', 'category2', 'category3', 'category4', 'category5', 'category6','category7', 'category8'];
        const categoryNames = {
            'category1': '鲁虺软件',
            'category2': '商业文案',
            'category3': '视频剪辑',
            'category4': '录音剪辑',
            'category5': '网站运维',
            'category6': '标志设计',
            'category7': '诗词歌赋',
            'category8': '社会观察'
        };
        const itemsPerPage = 10; // 每页显示数量
        const LOAD_TIMEOUT = 10000; // 加载超时时间(ms)
        const MAX_DETECTION_ATTEMPTS = 50; // 最大检测文章ID尝试次数

        // 状态管理
        let currentPage = 1;
        let currentCategory = null;
        let searchTerm = '';
        let searchType = 'title'; // 默认为标题搜索
        let totalArticles = 0;
        let totalPages = 0;
        let categoryArticleCounts = {};
        let articleCache = new Map(); // 缓存已加载的文章内容
        let loadTimeout = null;

        // 初始化
        function init() {
            // 立即显示分类导航，不等待数据加载
            generateCategoryNav();
            // 显示加载状态
            showLoading();
            
            // 设置加载超时
            loadTimeout = setTimeout(() => {
                hideLoading();
                showError('加载超时，请检查网络连接或重试');
            }, LOAD_TIMEOUT);
            
            // 加载数据
            Promise.all([
                loadCategoryStats(),
                handleUrlParams()
            ]).catch(error => {
                console.error('初始化失败:', error);
                hideLoading();
                showError('加载失败: ' + (error.message || '未知错误'));
            });
        }

        // 处理URL参数
        async function handleUrlParams() {
            const urlParams = new URLSearchParams(window.location.search);
            const category = urlParams.get('category');
            const articleId = urlParams.get('id');
            const page = parseInt(urlParams.get('p')) || 1;
            const q = urlParams.get('q') || '';

            searchInput.value = q;
            searchTerm = q;
            currentPage = page;

            try {
                if (articleId && category) {
                    // 显示指定文章
                    await showArticleDetail(category, articleId);
                } else if (category && categories.includes(category)) {
                    // 显示指定分类
                    currentCategory = category;
                    await loadArticlesByCategory(category, page);
                    updateNavActiveState(category);
                } else {
                    // 显示所有文章
                    await loadAllArticles(page);
                }
            } finally {
                clearTimeout(loadTimeout);
                hideLoading();
            }
        }

        // 加载分类统计信息 - 自动检测实际文章数量
        async function loadCategoryStats() {
            // 清空之前的统计
            categoryArticleCounts = {};
            
            // 为每个分类检测实际文章数量
            for (const category of categories) {
                categoryArticleCounts[category] = await detectArticleCount(category);
            }
            
            displayCategoryStats();
            return true;
        }

        // 检测分类中的文章数量
        async function detectArticleCount(category) {
            let count = 0;
            let consecutiveFailures = 0;
            
            // 从ID=1开始尝试检测
            for (let id = 1; id <= MAX_DETECTION_ATTEMPTS; id++) {
                try {
                    const controller = new AbortController();
                    const timeoutId = setTimeout(() => controller.abort(), 1000);
                    
                    const response = await fetch(`${category}/${id}.txt`, { 
                        method: 'HEAD', // 只请求头部，不下载内容
                        signal: controller.signal 
                    });
                    
                    clearTimeout(timeoutId);
                    
                    if (response.ok) {
                        count = id; // 更新计数
                        consecutiveFailures = 0; // 重置连续失败计数
                    } else {
                        consecutiveFailures++;
                    }
                } catch (error) {
                    consecutiveFailures++;
                }
                
                // 如果连续5个ID都不存在，认为后面没有更多文章了
                if (consecutiveFailures >= 5) {
                    break;
                }
            }
            
            return count;
        }

        // 显示分类统计
        function displayCategoryStats() {
            let totalCount = 0;
            let statsHtml = '<div class="flex flex-wrap gap-x-6 gap-y-2">';
            statsHtml += '<span class="font-medium">文章分类统计：</span>';
            
            for (const category in categoryArticleCounts) {
                const count = categoryArticleCounts[category];
                totalCount += count;
                statsHtml += `<div><span class="text-gray-700">${categoryNames[category]}:</span> <span class="font-medium">${count}</span> 篇</div>`;
            }
            
            statsHtml += `<div class="w-full mt-2 pt-2 border-t border-gray-100"><span class="font-medium">总计:</span> ${totalCount} 篇文章</div>`;
            statsHtml += '</div>';
            
            categoryStats.innerHTML = statsHtml;
        }

        // 生成分类导航 - 立即执行，不依赖数据加载
        function generateCategoryNav() {
            // 添加"全部文章"链接
            const allLink = document.createElement('a');
            allLink.href = '?p=1';
            allLink.textContent = '全部文章';
            allLink.className = 'nav-link text-blue-500 hover:text-blue-700 whitespace-nowrap';
            if (!currentCategory) {
                allLink.classList.add('active');
            }
            allLink.addEventListener('click', (e) => {
                e.preventDefault();
                currentCategory = null;
                currentPage = 1;
                showLoading();
                loadAllArticles(1).finally(() => hideLoading());
                updateNavActiveState(null);
            });
            categoryNav.appendChild(allLink);
            
            // 添加各分类链接
            categories.forEach(category => {
                const link = document.createElement('a');
                link.href = `?category=${category}&p=1`;
                link.textContent = categoryNames[category];
                link.className = 'nav-link text-blue-500 hover:text-blue-700 whitespace-nowrap';
                if (currentCategory === category) {
                    link.classList.add('active');
                }
                link.addEventListener('click', (e) => {
                    e.preventDefault();
                    currentCategory = category;
                    currentPage = 1;
                    showLoading();
                    loadArticlesByCategory(category, 1).finally(() => hideLoading());
                    updateNavActiveState(category);
                });
                categoryNav.appendChild(link);
            });
        }

        // 更新导航激活状态
        function updateNavActiveState(activeCategory) {
            document.querySelectorAll('.nav-link').forEach(link => {
                link.classList.remove('active');
            });
            
            if (activeCategory === null) {
                // 激活"全部文章"
                categoryNav.querySelector('a:first-child').classList.add('active');
            } else {
                // 激活对应分类
                document.querySelectorAll('.nav-link').forEach(link => {
                    if (link.href.includes(`category=${activeCategory}`)) {
                        link.classList.add('active');
                    }
                });
            }
        }

        // 加载所有分类的文章（分页）
        async function loadAllArticles(page) {
            try {
                let allArticles = [];
                // 限制同时加载的分类数量，避免请求过多
                const batchSize = 2;
                for (let i = 0; i < categories.length; i += batchSize) {
                    const batch = categories.slice(i, i + batchSize);
                    const promises = batch.map(category => 
                        loadArticlesFromCategory(category, 1, categoryArticleCounts[category] || 0)
                    );
                    const results = await Promise.all(promises);
                    results.forEach(articles => allArticles.push(...articles));
                    
                    // 每加载一批就更新一次UI，提升感知速度
                    if (i === 0) {
                        displayPartialResults(allArticles);
                    }
                }
                
                // 应用搜索过滤
                let filteredArticles = allArticles;
                if (searchTerm) {
                    const term = searchTerm.toLowerCase();
                    filteredArticles = allArticles.filter(article => {
                        if (searchType === 'title') {
                            return article.title.toLowerCase().includes(term);
                        } else {
                            // 全文搜索：标题或内容包含搜索词
                            return article.title.toLowerCase().includes(term) || 
                                   article.content.toLowerCase().includes(term);
                        }
                    });
                }
                
                // 排序
                filteredArticles.sort((a, b) => {
                    if (a.category === b.category) {
                        return a.id - b.id;
                    }
                    return a.category.localeCompare(b.category);
                });
                
                // 分页处理
                totalArticles = filteredArticles.length;
                totalPages = Math.ceil(totalArticles / itemsPerPage);
                const startIndex = (page - 1) * itemsPerPage;
                const pageArticles = filteredArticles.slice(startIndex, startIndex + itemsPerPage);
                
                displayArticles(pageArticles);
                displayPagination();
                updateUrl();
            } catch (error) {
                console.error('加载文章失败:', error);
                showError('加载文章失败: ' + error.message);
            }
        }

        // 按分类加载文章（分页）
        async function loadArticlesByCategory(category, page) {
            try {
                const maxId = categoryArticleCounts[category] || 0;
                const articles = await loadArticlesFromCategory(category, 1, maxId);
                
                // 应用搜索过滤
                let filteredArticles = articles;
                if (searchTerm) {
                    const term = searchTerm.toLowerCase();
                    filteredArticles = articles.filter(article => {
                        if (searchType === 'title') {
                            return article.title.toLowerCase().includes(term);
                        } else {
                            // 全文搜索：标题或内容包含搜索词
                            return article.title.toLowerCase().includes(term) || 
                                   article.content.toLowerCase().includes(term);
                        }
                    });
                }
                
                // 分页处理
                totalArticles = filteredArticles.length;
                totalPages = Math.ceil(totalArticles / itemsPerPage);
                const startIndex = (page - 1) * itemsPerPage;
                const pageArticles = filteredArticles.slice(startIndex, startIndex + itemsPerPage);
                
                displayArticles(pageArticles);
                displayPagination();
                updateUrl();
            } catch (error) {
                console.error('加载分类文章失败:', error);
                showError('加载文章失败: ' + error.message);
            }
        }

        // 从指定分类加载文章
        async function loadArticlesFromCategory(category, startId, endId) {
            if (endId < startId) return [];
            
            const articles = [];
            const cacheKeyPrefix = `${category}_`;
            
            // 先检查缓存
            for (let id = startId; id <= endId; id++) {
                const cacheKey = cacheKeyPrefix + id;
                if (articleCache.has(cacheKey)) {
                    articles.push(articleCache.get(cacheKey));
                }
            }
            
            // 如果缓存中已有足够的文章，直接返回
            if (articles.length >= endId - startId + 1) {
                return articles;
            }
            
            // 逐个加载文章，避免请求过多
            for (let id = startId; id <= endId; id++) {
                const cacheKey = cacheKeyPrefix + id;
                if (articleCache.has(cacheKey)) {
                    continue; // 已缓存，跳过
                }
                
                try {
                    // 设置单篇文章加载超时
                    const controller = new AbortController();
                    const timeoutId = setTimeout(() => controller.abort(), 3000);
                    
                    const response = await fetch(`${category}/${id}.txt`, { 
                        signal: controller.signal 
                    });
                    
                    clearTimeout(timeoutId);
                    
                    if (!response.ok) {
                        continue; // 文件不存在，继续下一个
                    }
                    
                    const arrayBuffer = await response.arrayBuffer();
                    const encoding = detectEncoding(arrayBuffer);
                    let text = '';
                    
                    if (encoding === 'utf-8') {
                        const decoder = new TextDecoder('utf-8');
                        text = decoder.decode(arrayBuffer);
                    } else {
                        const decoder = new TextDecoder('gbk');
                        text = decoder.decode(arrayBuffer);
                    }
                    
                    const lines = text.split('\n');
                    const title = lines[0] || `未命名文章 (${category}-${id})`;
                    const content = lines.slice(1).join('\n');
                    
                    // 判断是否为Markdown文件
                    const isMarkdown = title.toLowerCase().endsWith('.md') || 
                                      (id.toString().includes('.md'));
                    
                    const article = {
                        id,
                        title: title.replace(/\.md$/i, ''),
                        content,
                        category,
                        path: `${category}/${id}.txt`,
                        isMarkdown
                    };
                    
                    articles.push(article);
                    articleCache.set(cacheKey, article); // 缓存文章
                } catch (error) {
                    if (error.name !== 'AbortError') {
                        console.error(`加载文章 ${category}/${id}.txt 失败:`, error);
                    }
                    // 单篇文章加载失败不影响整体，继续加载下一篇
                    continue;
                }
            }
            
            return articles;
        }

        // 显示部分结果，提升感知速度
        function displayPartialResults(articles) {
            if (articleList.children.length === 0) { // 只在列表为空时显示
                articles.slice(0, itemsPerPage).forEach(article => {
                    const articleItem = document.createElement('div');
                    articleItem.className = 'bg-white p-4 rounded-lg shadow-sm hover:shadow-md transition';
                    
                    const link = document.createElement('a');
                    link.href = `?category=${article.category}&id=${article.id}`;
                    link.className = 'block h-full';
                    link.innerHTML = `
                        <div class="flex justify-between items-start">
                            <h3 class="font-medium text-gray-800 hover:text-blue-600 line-clamp-2">${article.title}</h3>
                            <span class="text-xs px-2 py-1 bg-gray-100 text-gray-600 rounded-full">${categoryNames[article.category]}</span>
                        </div>
                        <p class="text-gray-500 text-sm mt-2">ID: ${article.id}</p>
                    `;
                    
                    link.addEventListener('click', (e) => {
                        e.preventDefault();
                        showArticleDetail(article.category, article.id);
                    });
                    
                    articleItem.appendChild(link);
                    articleList.appendChild(articleItem);
                });
            }
        }

        // 显示文章列表
        function displayArticles(articles) {
            articleList.innerHTML = '';
            
            if (articles.length === 0) {
                const noResultsItem = document.createElement('div');
                noResultsItem.className = 'col-span-full text-center py-10 text-gray-500';
                noResultsItem.innerHTML = '<i class="fas fa-search-minus text-3xl mb-2"></i><p>未找到相关文章</p>';
                articleList.appendChild(noResultsItem);
                return;
            }
            
            articles.forEach(article => {
                const articleItem = document.createElement('div');
                articleItem.className = 'bg-white p-4 rounded-lg shadow-sm hover:shadow-md transition';
                
                const link = document.createElement('a');
                link.href = `?category=${article.category}&id=${article.id}`;
                link.className = 'block h-full';
                link.innerHTML = `
                    <div class="flex justify-between items-start">
                        <h3 class="font-medium text-gray-800 hover:text-blue-600 line-clamp-2">${article.title}</h3>
                        <span class="text-xs px-2 py-1 bg-gray-100 text-gray-600 rounded-full">${categoryNames[article.category]}</span>
                    </div>
                    <p class="text-gray-500 text-sm mt-2">ID: ${article.id}</p>
                `;
                
                link.addEventListener('click', (e) => {
                    e.preventDefault();
                    showArticleDetail(article.category, article.id);
                });
                
                articleItem.appendChild(link);
                articleList.appendChild(articleItem);
            });
        }

        // 显示文章详情
        async function showArticleDetail(category, id) {
            showLoading();
            try {
                const cacheKey = `${category}_${id}`;
                let article;
                
                // 检查缓存
                if (articleCache.has(cacheKey)) {
                    article = articleCache.get(cacheKey);
                } else {
                    // 加载单篇文章
                    const articles = await loadArticlesFromCategory(category, parseInt(id), parseInt(id));
                    article = articles[0];
                    
                    if (!article) {
                        throw new Error('文章不存在或无法加载');
                    }
                }
                
                // 设置页面标题、描述和关键词
                setMetaTags(article);
                
                // 显示文章详情
                articleListContainer.classList.add('hidden');
                articleDetail.classList.remove('hidden');
                
                articleTitle.textContent = article.title;
                articleMeta.innerHTML = `
                    <span class="mr-4"><i class="fas fa-folder text-gray-400 mr-1"></i> ${categoryNames[article.category]}</span>
                    <span><i class="fas fa-file-alt text-gray-400 mr-1"></i> ID: ${article.id}</span>
                    ${article.isMarkdown ? '<span class="ml-4 px-2 py-0.5 bg-blue-100 text-blue-700 text-xs rounded">Markdown</span>' : ''}
                `;
                
                // 根据是否为Markdown决定如何显示内容
                if (article.isMarkdown) {
                    articleContent.innerHTML = marked.parse(article.content);
                } else {
                    articleContent.innerHTML = `<pre>${escapeHtml(article.content)}</pre>`;
                }
                
                // 更新导航按钮状态
                await updateNavigationButtons(category, id);
                
                // 更新URL
                window.history.pushState({}, '', `?category=${category}&id=${id}`);
            } catch (error) {
                console.error('显示文章详情失败:', error);
                showError('无法加载文章内容: ' + error.message);
            } finally {
                hideLoading();
            }
        }

        // 设置页面元标签
        function setMetaTags(article) {
            // 设置页面标题
            document.title = article.title || '鲁虺文本内容搜索展示系统';
            
            // 提取描述 - 从内容中随机取一段
            let description = '';
            const contentText = article.isMarkdown ? 
                article.content.replace(/#|_|\*|\[|\]|\(|\)/g, '') : 
                article.content;
                
            const sentences = contentText.split(/[。！？；,.!?;]/).filter(s => s.trim().length > 20);
            
            if (sentences.length > 0) {
                // 随机选择一段
                const randomIndex = Math.floor(Math.random() * sentences.length);
                description = sentences[randomIndex].trim().substring(0, 160); // 限制最大长度
            } else {
                // 如果没有合适的句子，使用标题
                description = article.title.substring(0, 160);
            }
            
            // 更新description元标签
            let metaDesc = document.querySelector('meta[name="description"]');
            if (metaDesc) {
                metaDesc.setAttribute('content', description);
            } else {
                metaDesc = document.createElement('meta');
                metaDesc.name = 'description';
                metaDesc.content = description;
                document.head.appendChild(metaDesc);
            }
            
            // 提取关键词
            let keywords = [];
            
            // 从标题提取关键词
            const titleWords = article.title.split(/\s+|，|,|；|;/).filter(w => w.length > 1);
            keywords.push(...titleWords.slice(0, 5)); // 最多取5个
            
            // 从内容提取关键词
            const contentWords = contentText.split(/\s+|，|,|；|;/).filter(w => w.length > 1);
            // 简单去重并随机选择一些词
            const uniqueWords = [...new Set(contentWords)];
            // 随机选择最多5个词
            for (let i = 0; i < Math.min(5, uniqueWords.length); i++) {
                const randomIndex = Math.floor(Math.random() * uniqueWords.length);
                keywords.push(uniqueWords[randomIndex]);
                uniqueWords.splice(randomIndex, 1); // 避免重复
            }
            
            // 去重并限制最多10个关键词
            keywords = [...new Set(keywords)].slice(0, 10);
            
            // 更新keywords元标签
            let metaKeywords = document.querySelector('meta[name="keywords"]');
            if (metaKeywords) {
                metaKeywords.setAttribute('content', keywords.join(','));
            } else {
                metaKeywords = document.createElement('meta');
                metaKeywords.name = 'keywords';
                metaKeywords.content = keywords.join(',');
                document.head.appendChild(metaKeywords);
            }
        }

        // 更新导航按钮状态
        async function updateNavigationButtons(category, currentId) {
            const id = parseInt(currentId);
            const maxId = categoryArticleCounts[category] || 0;
            
            // 检查上一篇是否存在
            let hasPrev = id > 1;
            // 检查下一篇是否存在
            let hasNext = id < maxId;
            
            // 更新按钮状态
            prevArticleButton.disabled = !hasPrev;
            prevArticleButton.classList.toggle('opacity-50', !hasPrev);
            prevArticleButton.classList.toggle('cursor-not-allowed', !hasPrev);
            
            nextArticleButton.disabled = !hasNext;
            nextArticleButton.classList.toggle('opacity-50', !hasNext);
            nextArticleButton.classList.toggle('cursor-not-allowed', !hasNext);
            
            // 添加按钮点击事件
            prevArticleButton.onclick = hasPrev ? () => {
                showLoading();
                showArticleDetail(category, id - 1).finally(() => hideLoading());
            } : null;
            
            nextArticleButton.onclick = hasNext ? () => {
                showLoading();
                showArticleDetail(category, id + 1).finally(() => hideLoading());
            } : null;
        }

        // 显示分页控件
        function displayPagination() {
            pagination.innerHTML = '';
            
            // 首页按钮
            const firstButton = createPageButton('首页', 1);
            firstButton.disabled = currentPage === 1;
            pagination.appendChild(firstButton);
            
            // 上一页按钮
            const prevButton = createPageButton('<i class="fas fa-chevron-left"></i>', currentPage - 1);
            prevButton.disabled = currentPage === 1;
            pagination.appendChild(prevButton);
            
            // 页码按钮 - 只显示当前页附近的页码
            const visiblePages = 5;
            let startPage = Math.max(1, currentPage - Math.floor(visiblePages / 2));
            let endPage = startPage + visiblePages - 1;
            
            if (endPage > totalPages) {
                endPage = totalPages;
                startPage = Math.max(1, endPage - visiblePages + 1);
            }
            
            for (let i = startPage; i <= endPage; i++) {
                const pageButton = createPageButton(i, i);
                if (i === currentPage) {
                    pageButton.classList.add('bg-blue-700');
                    pageButton.disabled = true;
                }
                pagination.appendChild(pageButton);
            }
            
            // 下一页按钮
            const nextButton = createPageButton('<i class="fas fa-chevron-right"></i>', currentPage + 1);
            nextButton.disabled = currentPage === totalPages || totalPages === 0;
            pagination.appendChild(nextButton);
            
            // 末页按钮
            const lastButton = createPageButton('末页', totalPages);
            lastButton.disabled = currentPage === totalPages || totalPages === 0;
            pagination.appendChild(lastButton);
        }

        // 创建分页按钮
        function createPageButton(text, pageNumber) {
            const button = document.createElement('button');
            button.innerHTML = text;
            button.className = 'bg-blue-500 text-white p-2 rounded-md hover:bg-blue-600 transition';
            button.addEventListener('click', () => {
                currentPage = pageNumber;
                showLoading();
                if (currentCategory) {
                    loadArticlesByCategory(currentCategory, pageNumber).finally(() => hideLoading());
                } else {
                    loadAllArticles(pageNumber).finally(() => hideLoading());
                }
            });
            return button;
        }

        // 执行搜索
        function performSearch() {
            const term = searchInput.value.trim().toLowerCase();
            // 获取当前选中的搜索类型
            searchType = document.querySelector('input[name="search-type"]:checked').value;
            
            if (term !== searchTerm || searchTypeChanged) {
                searchTerm = term;
                currentPage = 1; // 搜索时重置到第一页
                showLoading();
                
                if (currentCategory) {
                    loadArticlesByCategory(currentCategory, 1).finally(() => hideLoading());
                } else {
                    loadAllArticles(1).finally(() => hideLoading());
                }
            }
        }

        // 更新URL
        function updateUrl() {
            const urlParams = new URLSearchParams();
            
            if (currentCategory) {
                urlParams.set('category', currentCategory);
            }
            
            if (searchTerm) {
                urlParams.set('q', searchTerm);
            }
            
            urlParams.set('p', currentPage);
            
            window.history.replaceState({}, '', `?${urlParams.toString()}`);
        }

        // 编码检测函数
        function detectEncoding(arrayBuffer) {
            const uint8Array = new Uint8Array(arrayBuffer);
            
            // 简单判断是否为UTF-8编码
            for (let i = 0; i < Math.min(100, uint8Array.length); i++) { // 只检查前100个字节，加快检测速度
                if ((uint8Array[i] & 0x80) === 0) {
                    continue; // 单字节字符
                } else if ((uint8Array[i] & 0xE0) === 0xC0) {
                    // 双字节序列
                    if (i + 1 >= uint8Array.length) return 'gbk';
                    if ((uint8Array[i + 1] & 0xC0) !== 0x80) return 'gbk';
                    i++;
                } else if ((uint8Array[i] & 0xF0) === 0xE0) {
                    // 三字节序列
                    if (i + 2 >= uint8Array.length) return 'gbk';
                    if ((uint8Array[i + 1] & 0xC0) !== 0x80 || (uint8Array[i + 2] & 0xC0) !== 0x80) return 'gbk';
                    i += 2;
                } else {
                    // 不符合UTF-8编码规则，视为GBK
                    return 'gbk';
                }
            }
            
            return 'utf-8';
        }

        // HTML转义函数
        function escapeHtml(unsafe) {
            return unsafe
                .replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/"/g, "&quot;")
                .replace(/'/g, "&#039;");
        }

        // 显示加载状态
        function showLoading() {
            loadingIndicator.classList.remove('hidden');
            errorContainer.classList.add('hidden');
        }

        // 隐藏加载状态
        function hideLoading() {
            loadingIndicator.classList.add('hidden');
        }

        // 显示错误信息
        function showError(message) {
            errorMessage.innerHTML = `<i class="fas fa-exclamation-circle mr-2"></i>${message}`;
            errorContainer.classList.remove('hidden');
            loadingIndicator.classList.add('hidden');
        }

        // 事件监听
        backButton.addEventListener('click', () => {
            articleDetail.classList.add('hidden');
            articleListContainer.classList.remove('hidden');
            // 恢复首页的元标签
            document.title = '鲁虺文本内容搜索展示系统';
            let metaDesc = document.querySelector('meta[name="description"]');
            if (metaDesc) {
                metaDesc.setAttribute('content', '鲁虺文本内容搜索展示系统，高效检索与展示各类文本内容');
            }
            let metaKeywords = document.querySelector('meta[name="keywords"]');
            if (metaKeywords) {
                metaKeywords.setAttribute('content', '鲁虺,文本内容,搜索系统,文档管理');
            }
            updateUrl();
        });

        // 首页按钮事件
        homeButton.addEventListener('click', () => {
            currentCategory = null;
            currentPage = 1;
            searchTerm = '';
            searchInput.value = '';
            document.querySelector('input[name="search-type"][value="title"]').checked = true;
            searchType = 'title';
            
            articleDetail.classList.add('hidden');
            articleListContainer.classList.remove('hidden');
            
            // 恢复首页的元标签
            document.title = '鲁虺文本内容搜索展示系统';
            let metaDesc = document.querySelector('meta[name="description"]');
            if (metaDesc) {
                metaDesc.setAttribute('content', '鲁虺文本内容搜索展示系统，高效检索与展示各类文本内容');
            }
            let metaKeywords = document.querySelector('meta[name="keywords"]');
            if (metaKeywords) {
                metaKeywords.setAttribute('content', '鲁虺,文本内容,搜索系统,文档管理');
            }
            
            showLoading();
            loadAllArticles(1).finally(() => hideLoading());
            updateNavActiveState(null);
            updateUrl();
        });

        searchButton.addEventListener('click', performSearch);

        searchInput.addEventListener('keydown', (event) => {
            if (event.key === 'Enter') {
                performSearch();
            }
        });

        // 监听搜索类型变化
        searchTypeRadios.forEach(radio => {
            radio.addEventListener('change', performSearch);
        });

        // 监听浏览器历史记录变化
        window.addEventListener('popstate', () => {
            showLoading();
            handleUrlParams().finally(() => hideLoading());
        });

        // 初始化系统
        init();
    </script>
</body>

</html>
```

主要修改内容说明：

1. 取消固定文章数量，改为自动统计：
   - 移除了`categoryMaxCounts`固定值
   - 添加了`detectArticleCount`函数，通过HTTP HEAD请求检测每个分类下实际存在的文章数量
   - 增加了`MAX_DETECTION_ATTEMPTS`限制最大检测尝试次数

2. 增加返回首页功能：
   - 在页面头部添加了"首页"按钮
   - 实现了`homeButton`点击事件处理函数，重置所有状态并返回首页

3. 增加全文搜索功能：
   - 添加了搜索类型选择（标题搜索/全文搜索）的单选按钮
   - 修改了搜索过滤逻辑，根据选择的搜索类型对标题或全文进行匹配

4. 动态设置页面元标签：
   - 添加了`setMetaTags`函数，在显示文章详情时调用
   - 从文章标题设置`<title>`
   - 从文章内容中随机提取一段文字作为`<meta name="description">`
   - 从标题和内容中提取关键词作为`<meta name="keywords">`
   - 在返回列表或首页时恢复默认元标签

5. 其他优化：
   - 调整了加载超时时间
   - 优化了搜索输入框的占位提示文字
   - 增加了搜索类型切换时的即时响应

这些修改使系统更加灵活和实用，能够自动适应实际的文章数量，并提供更全面的搜索功能和更好的元标签支持。


除了可以搜索文章标题，增加全文搜索功能
path="index.html" language="html" description="支持和全文搜索功能的文章展示系统">

<html lang="zh-CN">

<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<script src="https://cdn.tailwindcss.com"></script>
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css" rel="stylesheet">
<!-- 引入Markdown解析库 -->
<script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
<title>鲁虺文本内容搜索展示系统</title>
<style>
body {
font-family: 'Inter', system-ui, sans-serif;
}
pre {
white-space: pre-wrap;
word-wrap: break-word;
font-family: 'Consolas', 'Monaco', monospace;
background-color: #f5f5f5;
padding: 1rem;
border-radius: 4px;
margin: 1rem 0;
}
.markdown-content h1, .markdown-content h2, .markdown-content h3 {
font-weight: bold;
margin: 1.5rem 0 1rem;
}
.markdown-content h1 { font-size: 1.8rem; }
.markdown-content h2 { font-size: 1.5rem; }
.markdown-content h3 { font-size: 1.2rem; }
.markdown-content p { margin-bottom: 1rem; }
.markdown-content ul, .markdown-content ol {
margin-left: 1.5rem;
margin-bottom: 1rem;
}
.markdown-content ul { list-style-type: disc; }
.markdown-content ol { list-style-type: decimal; }
.markdown-content blockquote {
border-left: 4px solid #ddd;
padding-left: 1rem;
margin: 1rem 0;
color: #666;
}
.markdown-content a { color: #3b82f6; text-decoration: underline; }
.loading {
display: inline-block;
width: 20px;
height: 20px;
border: 3px solid rgba(59, 130, 246, 0.3);
border-radius: 50%;
border-top-color: #3b82f6;
animation: spin 1s ease-in-out infinite;
}
@keyframes spin {
to { transform: rotate(360deg); }
}
.nav-link.active {
color: #1e40af;
font-weight: bold;
text-decoration: underline;
}
.error-message {
background-color: #fee2e2;
border: 1px solid #fecaca;
color: #dc2626;
padding: 1rem;
border-radius: 4px;
margin: 1rem 0;
}
.search-option {
border: 1px solid #ddd;
padding: 0.5rem 1rem;
border-radius: 4px;
cursor: pointer;
transition: all 0.2s;
}
.search-option:hover {
background-color: #f0f0f0;
}
.search-option.active {
background-color: #e6f4ff;
border-color: #91c9ff;
}
.search-hit {
background-color: #fff3cd;
padding: 0 2px;
border-radius: 2px;
}
</style>
</head>

<body class="bg-gray-50">
<div class="container mx-auto p-4 md:p-8 max-w-6xl">
<header class="mb-8">
<h1 class="text-3xl md:text-4xl font-bold text-gray-800 mb-2">鲁虺文本内容搜索展示系统</h1>
<p class="text-gray-600">高效检索与展示各类文本内容</p>
</header>

plaintext
    &#x3C;div class=&#x22;mb-6&#x22;&#x3E;
        &#x3C;div class=&#x22;flex flex-col md:flex-row gap-3&#x22;&#x3E;
            &#x3C;input type=&#x22;text&#x22; id=&#x22;search-input&#x22; placeholder=&#x22;&#x641C;&#x7D22;&#x6587;&#x7AE0;&#x6807;&#x9898;&#x6216;&#x5185;&#x5BB9;...&#x22;
                class=&#x22;border border-gray-300 p-2 rounded-md flex-grow focus:outline-none focus:ring-2 focus:ring-blue-500&#x22;&#x3E;
            &#x3C;div class=&#x22;relative&#x22;&#x3E;
                &#x3C;button id=&#x22;search-button&#x22; class=&#x22;bg-blue-500 text-white p-2 rounded-md hover:bg-blue-600 transition&#x22;&#x3E;
                    &#x3C;i class=&#x22;fas fa-search mr-1&#x22;&#x3E;&#x3C;/i&#x3E; &#x641C;&#x7D22;
                &#x3C;/button&#x3E;
                &#x3C;button id=&#x22;search-options-button&#x22; class=&#x22;ml-2 bg-gray-200 text-gray-700 p-2 rounded-md hover:bg-gray-300 transition&#x22;&#x3E;
                    &#x3C;i class=&#x22;fas fa-sliders-h&#x22;&#x3E;&#x3C;/i&#x3E;
                &#x3C;/button&#x3E;
                &#x3C;!-- &#x641C;&#x7D22;&#x9009;&#x9879;&#x4E0B;&#x62C9;&#x6846; --&#x3E;
                &#x3C;div id=&#x22;search-options&#x22; class=&#x22;hidden absolute right-0 mt-2 w-48 bg-white shadow-lg rounded-md z-10 p-2&#x22;&#x3E;
                    &#x3C;div class=&#x22;search-option active&#x22; data-option=&#x22;title&#x22;&#x3E;
                        &#x3C;label class=&#x22;flex items-center&#x22;&#x3E;
                            &#x3C;input type=&#x22;radio&#x22; name=&#x22;search-type&#x22; value=&#x22;title&#x22; checked class=&#x22;mr-2&#x22;&#x3E;
                            &#x3C;span&#x3E;&#x6807;&#x9898;&#x641C;&#x7D22;&#x3C;/span&#x3E;
                        &#x3C;/label&#x3E;
                    &#x3C;/div&#x3E;
                    &#x3C;div class=&#x22;search-option&#x22; data-option=&#x22;content&#x22;&#x3E;
                        &#x3C;label class=&#x22;flex items-center&#x22;&#x3E;
                            &#x3C;input type=&#x22;radio&#x22; name=&#x22;search-type&#x22; value=&#x22;content&#x22; class=&#x22;mr-2&#x22;&#x3E;
                            &#x3C;span&#x3E;&#x5185;&#x5BB9;&#x641C;&#x7D22;&#x3C;/span&#x3E;
                        &#x3C;/label&#x3E;
                    &#x3C;/div&#x3E;
                    &#x3C;div class=&#x22;search-option&#x22; data-option=&#x22;both&#x22;&#x3E;
                        &#x3C;label class=&#x22;flex items-center&#x22;&#x3E;
                            &#x3C;input type=&#x22;radio&#x22; name=&#x22;search-type&#x22; value=&#x22;both&#x22; class=&#x22;mr-2&#x22;&#x3E;
                            &#x3C;span&#x3E;&#x6807;&#x9898;&#x548C;&#x5185;&#x5BB9;&#x3C;/span&#x3E;
                        &#x3C;/label&#x3E;
                    &#x3C;/div&#x3E;
                &#x3C;/div&#x3E;
            &#x3C;/div&#x3E;
        &#x3C;/div&#x3E;
        &#x3C;!-- &#x641C;&#x7D22;&#x4FE1;&#x606F;&#x663E;&#x793A; --&#x3E;
        &#x3C;div id=&#x22;search-info&#x22; class=&#x22;mt-2 text-sm text-gray-500 hidden&#x22;&#x3E;
            &#x3C;span&#x3E;&#x641C;&#x7D22;&#x8303;&#x56F4;: &#x3C;/span&#x3E;
            &#x3C;span id=&#x22;search-scope-text&#x22;&#x3E;&#x6807;&#x9898;&#x3C;/span&#x3E;
            &#x3C;span id=&#x22;search-results-count&#x22; class=&#x22;ml-2&#x22;&#x3E;&#x3C;/span&#x3E;
        &#x3C;/div&#x3E;
    &#x3C;/div&#x3E;

    <!-- 分类导航 -->

    &#x3C;div id=&#x22;category-nav&#x22; class=&#x22;mb-6 overflow-x-auto pb-2&#x22;&#x3E;
        &#x3C;div class=&#x22;flex space-x-4 min-w-max&#x22;&#x3E;
            &#x3C;!-- &#x5206;&#x7C7B;&#x5BFC;&#x822A;&#x94FE;&#x63A5;&#x5C06;&#x5728;&#x8FD9;&#x91CC;&#x52A8;&#x6001;&#x751F;&#x6210; --&#x3E;
        &#x3C;/div&#x3E;
    &#x3C;/div&#x3E;

    <!-- 分类统计 -->

    &#x3C;div id=&#x22;category-stats&#x22; class=&#x22;mb-6 p-4 bg-white rounded-lg shadow-sm&#x22;&#x3E;
        &#x3C;!-- &#x7EDF;&#x8BA1;&#x4FE1;&#x606F;&#x5C06;&#x5728;&#x8FD9;&#x91CC;&#x52A8;&#x6001;&#x751F;&#x6210; --&#x3E;
    &#x3C;/div&#x3E;

    <!-- 加载状态 -->

    &#x3C;div id=&#x22;loading-indicator&#x22; class=&#x22;hidden mb-6 text-center&#x22;&#x3E;
        &#x3C;div class=&#x22;loading mx-auto&#x22;&#x3E;&#x3C;/div&#x3E;
        &#x3C;p class=&#x22;text-gray-600 mt-2&#x22;&#x3E;&#x6B63;&#x5728;&#x52A0;&#x8F7D;&#x5185;&#x5BB9;...&#x3C;/p&#x3E;
    &#x3C;/div&#x3E;

    <!-- 错误信息 -->

    &#x3C;div id=&#x22;error-container&#x22; class=&#x22;hidden mb-6&#x22;&#x3E;
        &#x3C;div id=&#x22;error-message&#x22; class=&#x22;error-message&#x22;&#x3E;
            &#x3C;!-- &#x9519;&#x8BEF;&#x4FE1;&#x606F;&#x5C06;&#x5728;&#x8FD9;&#x91CC;&#x663E;&#x793A; --&#x3E;
        &#x3C;/div&#x3E;
    &#x3C;/div&#x3E;

    <!-- 文章列表容器 -->

    &#x3C;div id=&#x22;article-list-container&#x22; class=&#x22;mb-8&#x22;&#x3E;
        &#x3C;div id=&#x22;article-list&#x22; class=&#x22;grid grid-cols-1 md:grid-cols-2 gap-4&#x22;&#x3E;
            &#x3C;!-- &#x6587;&#x7AE0;&#x5217;&#x8868;&#x5C06;&#x5728;&#x8FD9;&#x91CC;&#x52A8;&#x6001;&#x751F;&#x6210; --&#x3E;
        &#x3C;/div&#x3E;

        <!-- 分页控件 -->

        &#x3C;div id=&#x22;pagination&#x22; class=&#x22;flex flex-wrap justify-center gap-2 mt-6&#x22;&#x3E;
            &#x3C;!-- &#x5206;&#x9875;&#x6309;&#x94AE;&#x5C06;&#x5728;&#x8FD9;&#x91CC;&#x52A8;&#x6001;&#x751F;&#x6210; --&#x3E;
        &#x3C;/div&#x3E;
    &#x3C;/div&#x3E;
&#x3C;/div&#x3E;

<!-- 文章详情页 -->

&#x3C;div id=&#x22;article-detail&#x22; class=&#x22;container mx-auto p-4 md:p-8 max-w-4xl hidden&#x22;&#x3E;
    &#x3C;button id=&#x22;back-button&#x22; class=&#x22;mb-6 inline-flex items-center bg-blue-500 text-white p-2 rounded-md hover:bg-blue-600 transition&#x22;&#x3E;
        &#x3C;i class=&#x22;fas fa-arrow-left mr-2&#x22;&#x3E;&#x3C;/i&#x3E; &#x8FD4;&#x56DE;&#x5217;&#x8868;
    &#x3C;/button&#x3E;

    &#x3C;div class=&#x22;bg-white p-6 rounded-lg shadow-sm mb-6&#x22;&#x3E;
        &#x3C;h2 id=&#x22;article-title&#x22; class=&#x22;text-2xl md:text-3xl font-bold mb-4 text-gray-800&#x22;&#x3E;&#x3C;/h2&#x3E;
        &#x3C;div id=&#x22;article-meta&#x22; class=&#x22;text-gray-500 text-sm mb-6&#x22;&#x3E;
            &#x3C;!-- &#x6587;&#x7AE0;&#x5143;&#x6570;&#x636E;&#x5C06;&#x5728;&#x8FD9;&#x91CC;&#x663E;&#x793A; --&#x3E;
        &#x3C;/div&#x3E;
        &#x3C;div id=&#x22;article-content&#x22; class=&#x22;markdown-content text-gray-700 leading-relaxed&#x22;&#x3E;
            &#x3C;!-- &#x6587;&#x7AE0;&#x5185;&#x5BB9;&#x5C06;&#x5728;&#x8FD9;&#x91CC;&#x663E;&#x793A; --&#x3E;
        &#x3C;/div&#x3E;
    &#x3C;/div&#x3E;

    &#x3C;div class=&#x22;flex justify-between&#x22;&#x3E;
        &#x3C;button id=&#x22;prev-article-button&#x22; class=&#x22;bg-blue-500 text-white p-2 rounded-md hover:bg-blue-600 transition&#x22;&#x3E;
            &#x3C;i class=&#x22;fas fa-chevron-left mr-1&#x22;&#x3E;&#x3C;/i&#x3E; &#x4E0A;&#x4E00;&#x7BC7;
        &#x3C;/button&#x3E;
        &#x3C;button id=&#x22;next-article-button&#x22; class=&#x22;bg-blue-500 text-white p-2 rounded-md hover:bg-blue-600 transition&#x22;&#x3E;
            &#x4E0B;&#x4E00;&#x7BC7; &#x3C;i class=&#x22;fas fa-chevron-right ml-1&#x22;&#x3E;&#x3C;/i&#x3E;
        &#x3C;/button&#x3E;
    &#x3C;/div&#x3E;
&#x3C;/div&#x3E;

&#x3C;script&#x3E;
    // DOM&#x5143;&#x7D20;
    const articleList = document.getElementById(&#x27;article-list&#x27;);
    const articleDetail = document.getElementById(&#x27;article-detail&#x27;);
    const articleTitle = document.getElementById(&#x27;article-title&#x27;);
    const articleContent = document.getElementById(&#x27;article-content&#x27;);
    const articleMeta = document.getElementById(&#x27;article-meta&#x27;);
    const backButton = document.getElementById(&#x27;back-button&#x27;);
    const searchInput = document.getElementById(&#x27;search-input&#x27;);
    const searchButton = document.getElementById(&#x27;search-button&#x27;);
    const searchOptionsButton = document.getElementById(&#x27;search-options-button&#x27;);
    const searchOptions = document.getElementById(&#x27;search-options&#x27;);
    const searchInfo = document.getElementById(&#x27;search-info&#x27;);
    const searchScopeText = document.getElementById(&#x27;search-scope-text&#x27;);
    const searchResultsCount = document.getElementById(&#x27;search-results-count&#x27;);
    const pagination = document.getElementById(&#x27;pagination&#x27;);
    const articleListContainer = document.getElementById(&#x27;article-list-container&#x27;);
    const categoryStats = document.getElementById(&#x27;category-stats&#x27;);
    const prevArticleButton = document.getElementById(&#x27;prev-article-button&#x27;);
    const nextArticleButton = document.getElementById(&#x27;next-article-button&#x27;);
    const categoryNav = document.getElementById(&#x27;category-nav&#x27;).querySelector(&#x27;div&#x27;);
    const loadingIndicator = document.getElementById(&#x27;loading-indicator&#x27;);
    const errorContainer = document.getElementById(&#x27;error-container&#x27;);
    const errorMessage = document.getElementById(&#x27;error-message&#x27;);

    // &#x914D;&#x7F6E;&#x53C2;&#x6570;
    const categories = [
        { id: &#x27;category1&#x27;, name: &#x27;&#x8BD7;&#x8BCD;&#x6B4C;&#x8D4B;&#x27; },
        { id: &#x27;category2&#x27;, name: &#x27;&#x5386;&#x53F2;&#x5178;&#x6545;&#x27; },
        { id: &#x27;category3&#x27;, name: &#x27;&#x79D1;&#x6280;&#x524D;&#x6CBF;&#x27; },
        { id: &#x27;category4&#x27;, name: &#x27;&#x751F;&#x6D3B;&#x5E38;&#x8BC6;&#x27; },
        { id: &#x27;category5&#x27;, name: &#x27;&#x827A;&#x672F;&#x9274;&#x8D4F;&#x27; },
        { id: &#x27;category6&#x27;, name: &#x27;&#x5065;&#x5EB7;&#x517B;&#x751F;&#x27; },
        { id: &#x27;category7&#x27;, name: &#x27;&#x4F53;&#x80B2;&#x8D5B;&#x4E8B;&#x27; }
    ];
    const itemsPerPage = 10;
    const LOAD_TIMEOUT = 8000; // &#x52A0;&#x8F7D;&#x8D85;&#x65F6;&#x65F6;&#x95F4;(ms)

    // &#x72B6;&#x6001;&#x7BA1;&#x7406;
    let currentPage = 1;
    let currentCategory = null;
    let searchTerm = &#x27;&#x27;;
    let searchType = &#x27;title&#x27;; // &#x9ED8;&#x8BA4;&#x4E3A;&#x6807;&#x9898;&#x641C;&#x7D22;&#xFF0C;&#x53EF;&#x9009;&#x503C;: title, content, both
    let totalArticles = 0;
    let totalPages = 0;
    let categoryArticleCounts = {};
    let articleCache = new Map(); // &#x7F13;&#x5B58;&#x5DF2;&#x52A0;&#x8F7D;&#x7684;&#x6587;&#x7AE0;&#x5185;&#x5BB9;
    let allArticles = []; // &#x5B58;&#x50A8;&#x6240;&#x6709;&#x5DF2;&#x52A0;&#x8F7D;&#x7684;&#x6587;&#x7AE0;&#xFF0C;&#x7528;&#x4E8E;&#x5168;&#x6587;&#x641C;&#x7D22;
    let loadTimeout = null;

    // &#x521D;&#x59CB;&#x5316;
    function init() {
        // &#x7ACB;&#x5373;&#x663E;&#x793A;&#x5206;&#x7C7B;&#x5BFC;&#x822A;&#xFF0C;&#x4E0D;&#x7B49;&#x5F85;&#x6570;&#x636E;&#x52A0;&#x8F7D;
        generateCategoryNav();
        // &#x663E;&#x793A;&#x52A0;&#x8F7D;&#x72B6;&#x6001;
        showLoading();
        
        // &#x8BBE;&#x7F6E;&#x52A0;&#x8F7D;&#x8D85;&#x65F6;
        loadTimeout = setTimeout(() =&#x3E; {
            hideLoading();
            showError(&#x27;&#x52A0;&#x8F7D;&#x8D85;&#x65F6;&#xFF0C;&#x8BF7;&#x68C0;&#x67E5;&#x7F51;&#x7EDC;&#x8FDE;&#x63A5;&#x6216;&#x91CD;&#x8BD5;&#x27;);
        }, LOAD_TIMEOUT);
        
        // &#x52A0;&#x8F7D;&#x6570;&#x636E;
        Promise.all([
            loadAllArticlesData(),
            handleUrlParams()
        ]).catch(error =&#x3E; {
            // &#x5FFD;&#x7565;&#x89E3;&#x6784;&#x9519;&#x8BEF;
            if (!error.message.includes(&#x27;Invalid attempt to destructure non-iterable instance&#x27;)) {
                console.error(&#x27;&#x521D;&#x59CB;&#x5316;&#x5931;&#x8D25;:&#x27;, error);
                hideLoading();
                showError(&#x27;&#x52A0;&#x8F7D;&#x5931;&#x8D25;: &#x27; + (error.message || &#x27;&#x672A;&#x77E5;&#x9519;&#x8BEF;&#x27;));
            } else {
                hideLoading();
            }
        });
    }

    // &#x9884;&#x52A0;&#x8F7D;&#x6240;&#x6709;&#x6587;&#x7AE0;&#x6570;&#x636E;&#xFF0C;&#x7528;&#x4E8E;&#x5168;&#x6587;&#x641C;&#x7D22;
    async function loadAllArticlesData() {
        allArticles = [];
        // &#x9650;&#x5236;&#x540C;&#x65F6;&#x52A0;&#x8F7D;&#x7684;&#x5206;&#x7C7B;&#x6570;&#x91CF;&#xFF0C;&#x907F;&#x514D;&#x8BF7;&#x6C42;&#x8FC7;&#x591A;
        const batchSize = 2;
        
        for (let i = 0; i &#x3C; categories.length; i += batchSize) {
            const batch = categories.slice(i, i + batchSize);
            const promises = batch.map(category =&#x3E; 
                loadArticlesFromCategory(category.id, 1, 100) // &#x52A0;&#x8F7D;&#x6BCF;&#x4E2A;&#x5206;&#x7C7B;&#x7684;&#x524D;100&#x7BC7;&#x6587;&#x7AE0;
            );
            const results = await Promise.all(promises);
            results.forEach(articles =&#x3E; allArticles.push(...articles));
        }
        
        // &#x66F4;&#x65B0;&#x5206;&#x7C7B;&#x7EDF;&#x8BA1;
        updateCategoryCounts();
        return true;
    }

    // &#x66F4;&#x65B0;&#x5206;&#x7C7B;&#x7EDF;&#x8BA1;&#x6570;&#x91CF;
    function updateCategoryCounts() {
        // &#x521D;&#x59CB;&#x5316;&#x7EDF;&#x8BA1;
        const stats = {};
        categories.forEach(category =&#x3E; {
            stats[category.id] = 0;
        });
        
        // &#x7EDF;&#x8BA1;&#x5404;&#x5206;&#x7C7B;&#x6587;&#x7AE0;&#x6570;&#x91CF;
        allArticles.forEach(article =&#x3E; {
            if (stats.hasOwnProperty(article.category)) {
                stats[article.category]++;
            }
        });
        
        categoryArticleCounts = stats;
        displayCategoryStats();
        
        // &#x66F4;&#x65B0;&#x5BFC;&#x822A;&#x680F;&#x4E2D;&#x7684;&#x6570;&#x91CF;&#x6807;&#x8BB0;
        categories.forEach(category =&#x3E; {
            const count = stats[category.id];
            const badge = document.querySelector(&#x60;span[data-category=&#x22;${category.id}&#x22;]&#x60;);
            if (badge) {
                badge.textContent = &#x60;(${count})&#x60;;
            }
        });
        
        // &#x66F4;&#x65B0;&#x603B;&#x6570;&#x91CF;
        const totalCount = Object.values(stats).reduce((sum, count) =&#x3E; sum + count, 0);
        document.getElementById(&#x27;total-count-badge&#x27;).textContent = &#x60;(${totalCount})&#x60;;
    }

    // &#x5904;&#x7406;URL&#x53C2;&#x6570;
    async function handleUrlParams() {
        const urlParams = new URLSearchParams(window.location.search);
        const category = urlParams.get(&#x27;category&#x27;);
        const articleId = urlParams.get(&#x27;id&#x27;);
        const page = parseInt(urlParams.get(&#x27;p&#x27;)) || 1;
        const q = urlParams.get(&#x27;q&#x27;) || &#x27;&#x27;;
        const searchTypeParam = urlParams.get(&#x27;searchType&#x27;) || &#x27;title&#x27;;

        searchInput.value = q;
        searchTerm = q;
        currentPage = page;
        
        // &#x8BBE;&#x7F6E;&#x641C;&#x7D22;&#x7C7B;&#x578B;
        if ([&#x27;title&#x27;, &#x27;content&#x27;, &#x27;both&#x27;].includes(searchTypeParam)) {
            searchType = searchTypeParam;
            document.querySelector(&#x60;input[name=&#x22;search-type&#x22;][value=&#x22;${searchType}&#x22;]&#x60;).checked = true;
            updateSearchOptionsUI();
        }
        
        try {
            if (articleId &#x26;&#x26; category) {
                // &#x663E;&#x793A;&#x6307;&#x5B9A;&#x6587;&#x7AE0;
                await showArticleDetail(category, articleId);
            } else if (category &#x26;&#x26; categories.some(c =&#x3E; c.id === category)) {
                // &#x663E;&#x793A;&#x6307;&#x5B9A;&#x5206;&#x7C7B;
                currentCategory = category;
                await filterAndDisplayArticles();
                updateNavActiveState(category);
            } else {
                // &#x663E;&#x793A;&#x6240;&#x6709;&#x6587;&#x7AE0;
                await filterAndDisplayArticles();
            }
            
            // &#x5982;&#x679C;&#x6709;&#x641C;&#x7D22;&#x8BCD;&#xFF0C;&#x663E;&#x793A;&#x641C;&#x7D22;&#x4FE1;&#x606F;
            if (searchTerm) {
                updateSearchInfo();
            }
        } catch (error) {
            // &#x5FFD;&#x7565;&#x89E3;&#x6784;&#x9519;&#x8BEF;
            if (!error.message.includes(&#x27;Invalid attempt to destructure non-iterable instance&#x27;)) {
                console.error(&#x27;&#x5904;&#x7406;URL&#x53C2;&#x6570;&#x5931;&#x8D25;:&#x27;, error);
                showError(&#x27;&#x52A0;&#x8F7D;&#x5931;&#x8D25;: &#x27; + (error.message || &#x27;&#x672A;&#x77E5;&#x9519;&#x8BEF;&#x27;));
            }
        } finally {
            clearTimeout(loadTimeout);
            hideLoading();
        }
    }

    // &#x663E;&#x793A;&#x5206;&#x7C7B;&#x7EDF;&#x8BA1;
    function displayCategoryStats() {
        let totalCount = 0;
        let statsHtml = &#x27;&#x3C;div class=&#x22;flex flex-wrap gap-x-6 gap-y-2&#x22;&#x3E;&#x27;;
        statsHtml += &#x27;&#x3C;span class=&#x22;font-medium&#x22;&#x3E;&#x6587;&#x7AE0;&#x5206;&#x7C7B;&#x7EDF;&#x8BA1;&#xFF1A;&#x3C;/span&#x3E;&#x27;;
        
        for (const category of categories) {
            const count = categoryArticleCounts[category.id] || 0;
            totalCount += count;
            statsHtml += &#x60;&#x3C;div&#x3E;&#x3C;span class=&#x22;text-gray-700&#x22;&#x3E;${category.name}:&#x3C;/span&#x3E; &#x3C;span class=&#x22;font-medium&#x22;&#x3E;${count}&#x3C;/span&#x3E; &#x7BC7;&#x3C;/div&#x3E;&#x60;;
        }
        
        statsHtml += &#x60;&#x3C;div class=&#x22;w-full mt-2 pt-2 border-t border-gray-100&#x22;&#x3E;&#x3C;span class=&#x22;font-medium&#x22;&#x3E;&#x603B;&#x8BA1;:&#x3C;/span&#x3E; ${totalCount} &#x7BC7;&#x6587;&#x7AE0;&#x3C;/div&#x3E;&#x60;;
        statsHtml += &#x27;&#x3C;/div&#x3E;&#x27;;
        
        categoryStats.innerHTML = statsHtml;
    }

    // &#x751F;&#x6210;&#x5206;&#x7C7B;&#x5BFC;&#x822A; - &#x7ACB;&#x5373;&#x6267;&#x884C;&#xFF0C;&#x4E0D;&#x4F9D;&#x8D56;&#x6570;&#x636E;&#x52A0;&#x8F7D;
    function generateCategoryNav() {
        // &#x6DFB;&#x52A0;&#x22;&#x5168;&#x90E8;&#x6587;&#x7AE0;&#x22;&#x94FE;&#x63A5;
        const allLink = document.createElement(&#x27;a&#x27;);
        allLink.href = &#x27;?p=1&#x27;;
        allLink.textContent = &#x27;&#x5168;&#x90E8;&#x6587;&#x7AE0;&#x27;;
        allLink.className = &#x27;nav-link text-blue-500 hover:text-blue-700 whitespace-nowrap&#x27;;
        allLink.innerHTML = &#x60;&#x5168;&#x90E8;&#x6587;&#x7AE0; &#x3C;span class=&#x22;ml-1 text-xs bg-gray-200 px-1 rounded&#x22; id=&#x22;total-count-badge&#x22;&#x3E;(0)&#x3C;/span&#x3E;&#x60;;
        if (!currentCategory) {
            allLink.classList.add(&#x27;active&#x27;);
        }
        allLink.addEventListener(&#x27;click&#x27;, (e) =&#x3E; {
            e.preventDefault();
            currentCategory = null;
            currentPage = 1;
            showLoading();
            filterAndDisplayArticles().finally(() =&#x3E; hideLoading());
            updateNavActiveState(null);
        });
        categoryNav.appendChild(allLink);
        
        // &#x6DFB;&#x52A0;&#x5404;&#x5206;&#x7C7B;&#x94FE;&#x63A5;
        categories.forEach(category =&#x3E; {
            const link = document.createElement(&#x27;a&#x27;);
            link.href = &#x60;?category=${category.id}&#x26;p=1&#x60;;
            link.className = &#x27;nav-link text-blue-500 hover:text-blue-700 whitespace-nowrap&#x27;;
            link.innerHTML = &#x60;${category.name} &#x3C;span class=&#x22;ml-1 text-xs bg-gray-200 px-1 rounded&#x22; data-category=&#x22;${category.id}&#x22;&#x3E;(0)&#x3C;/span&#x3E;&#x60;;
            if (currentCategory === category.id) {
                link.classList.add(&#x27;active&#x27;);
            }
            link.addEventListener(&#x27;click&#x27;, (e) =&#x3E; {
                e.preventDefault();
                currentCategory = category.id;
                currentPage = 1;
                showLoading();
                filterAndDisplayArticles().finally(() =&#x3E; hideLoading());
                updateNavActiveState(category.id);
            });
            categoryNav.appendChild(link);
        });
    }

    // &#x66F4;&#x65B0;&#x5BFC;&#x822A;&#x6FC0;&#x6D3B;&#x72B6;&#x6001;
    function updateNavActiveState(activeCategory) {
        document.querySelectorAll(&#x27;.nav-link&#x27;).forEach(link =&#x3E; {
            link.classList.remove(&#x27;active&#x27;);
        });
        
        if (activeCategory === null) {
            // &#x6FC0;&#x6D3B;&#x22;&#x5168;&#x90E8;&#x6587;&#x7AE0;&#x22;
            categoryNav.querySelector(&#x27;a:first-child&#x27;).classList.add(&#x27;active&#x27;);
        } else {
            // &#x6FC0;&#x6D3B;&#x5BF9;&#x5E94;&#x5206;&#x7C7B;
            document.querySelectorAll(&#x27;.nav-link&#x27;).forEach(link =&#x3E; {
                if (link.href.includes(&#x60;category=${activeCategory}&#x60;)) {
                    link.classList.add(&#x27;active&#x27;);
                }
            });
        }
    }

    // &#x8FC7;&#x6EE4;&#x5E76;&#x663E;&#x793A;&#x6587;&#x7AE0;
    async function filterAndDisplayArticles() {
        try {
            // &#x5E94;&#x7528;&#x5206;&#x7C7B;&#x8FC7;&#x6EE4;
            let filteredArticles = allArticles;
            if (currentCategory) {
                filteredArticles = allArticles.filter(article =&#x3E; article.category === currentCategory);
            }
            
            // &#x5E94;&#x7528;&#x641C;&#x7D22;&#x8FC7;&#x6EE4;&#xFF08;&#x652F;&#x6301;&#x6807;&#x9898;&#x3001;&#x5185;&#x5BB9;&#x6216;&#x4E24;&#x8005;&#xFF09;
            if (searchTerm) {
                const term = searchTerm.toLowerCase();
                filteredArticles = filteredArticles.filter(article =&#x3E; {
                    const titleMatch = article.title.toLowerCase().includes(term);
                    const contentMatch = article.content.toLowerCase().includes(term);
                    
                    switch (searchType) {
                        case &#x27;title&#x27;:
                            return titleMatch;
                        case &#x27;content&#x27;:
                            return contentMatch;
                        case &#x27;both&#x27;:
                            return titleMatch || contentMatch;
                        default:
                            return titleMatch;
                    }
                });
            }
            
            // &#x6392;&#x5E8F;
            filteredArticles.sort((a, b) =&#x3E; {
                if (a.category === b.category) {
                    return a.id - b.id;
                }
                return a.category.localeCompare(b.category);
            });
            
            // &#x5206;&#x9875;&#x5904;&#x7406;
            totalArticles = filteredArticles.length;
            totalPages = Math.ceil(totalArticles / itemsPerPage);
            const startIndex = (currentPage - 1) * itemsPerPage;
            const pageArticles = filteredArticles.slice(startIndex, startIndex + itemsPerPage);
            
            displayArticles(pageArticles);
            displayPagination();
            updateUrl();
            updateSearchInfo();
        } catch (error) {
            // &#x5FFD;&#x7565;&#x89E3;&#x6784;&#x9519;&#x8BEF;
            if (!error.message.includes(&#x27;Invalid attempt to destructure non-iterable instance&#x27;)) {
                console.error(&#x27;&#x8FC7;&#x6EE4;&#x6587;&#x7AE0;&#x5931;&#x8D25;:&#x27;, error);
                showError(&#x27;&#x52A0;&#x8F7D;&#x6587;&#x7AE0;&#x5931;&#x8D25;: &#x27; + error.message);
            }
        }
    }

    // &#x4ECE;&#x6307;&#x5B9A;&#x5206;&#x7C7B;&#x52A0;&#x8F7D;&#x6587;&#x7AE0;
    async function loadArticlesFromCategory(category, startId, endId) {
        const articles = [];
        const cacheKeyPrefix = &#x60;${category}_&#x60;;
        
        // &#x5148;&#x68C0;&#x67E5;&#x7F13;&#x5B58;
        for (let id = startId; id &#x3C;= endId; id++) {
            const cacheKey = cacheKeyPrefix + id;
            if (articleCache.has(cacheKey)) {
                articles.push(articleCache.get(cacheKey));
            }
        }
        
        // &#x5982;&#x679C;&#x7F13;&#x5B58;&#x4E2D;&#x5DF2;&#x6709;&#x8DB3;&#x591F;&#x7684;&#x6587;&#x7AE0;&#xFF0C;&#x76F4;&#x63A5;&#x8FD4;&#x56DE;
        if (articles.length &#x3E;= endId - startId + 1) {
            return articles;
        }
        
        // &#x9010;&#x4E2A;&#x52A0;&#x8F7D;&#x6587;&#x7AE0;&#xFF0C;&#x907F;&#x514D;&#x8BF7;&#x6C42;&#x8FC7;&#x591A;
        for (let id = startId; id &#x3C;= endId; id++) {
            const cacheKey = cacheKeyPrefix + id;
            if (articleCache.has(cacheKey)) {
                continue; // &#x5DF2;&#x7F13;&#x5B58;&#xFF0C;&#x8DF3;&#x8FC7;
            }
            
            try {
                // &#x8BBE;&#x7F6E;&#x5355;&#x7BC7;&#x6587;&#x7AE0;&#x52A0;&#x8F7D;&#x8D85;&#x65F6;
                const controller = new AbortController();
                const timeoutId = setTimeout(() =&#x3E; controller.abort(), 3000);
                
                const response = await fetch(&#x60;${category}/${id}.txt&#x60;, { 
                    signal: controller.signal 
                });
                
                clearTimeout(timeoutId);
                
                if (!response.ok) {
                    continue; // &#x6587;&#x4EF6;&#x4E0D;&#x5B58;&#x5728;&#xFF0C;&#x7EE7;&#x7EED;&#x4E0B;&#x4E00;&#x4E2A;
                }
                
                const arrayBuffer = await response.arrayBuffer();
                const encoding = detectEncoding(arrayBuffer);
                let text = &#x27;&#x27;;
                
                if (encoding === &#x27;utf-8&#x27;) {
                    const decoder = new TextDecoder(&#x27;utf-8&#x27;);
                    text = decoder.decode(arrayBuffer);
                } else {
                    const decoder = new TextDecoder(&#x27;gbk&#x27;);
                    text = decoder.decode(arrayBuffer);
                }
                
                const lines = text.split(&#x27;\n&#x27;);
                const title = lines[0] || &#x60;&#x672A;&#x547D;&#x540D;&#x6587;&#x7AE0; (${category}-${id})&#x60;;
                const content = lines.slice(1).join(&#x27;\n&#x27;);
                
                // &#x5224;&#x65AD;&#x662F;&#x5426;&#x4E3A;Markdown&#x6587;&#x4EF6;
                const isMarkdown = title.toLowerCase().endsWith(&#x27;.md&#x27;) || 
                                  (id.toString().includes(&#x27;.md&#x27;));
                
                const article = {
                    id,
                    title: title.replace(/\.md$/i, &#x27;&#x27;),
                    content,
                    category,
                    path: &#x60;${category}/${id}.txt&#x60;,
                    isMarkdown
                };
                
                articles.push(article);
                articleCache.set(cacheKey, article); // &#x7F13;&#x5B58;&#x6587;&#x7AE0;
            } catch (error) {
                // &#x5FFD;&#x7565;&#x89E3;&#x6784;&#x9519;&#x8BEF;&#x548C;&#x8D85;&#x65F6;&#x9519;&#x8BEF;
                if (error.name !== &#x27;AbortError&#x27; &#x26;&#x26; 
                    !error.message.includes(&#x27;Invalid attempt to destructure non-iterable instance&#x27;)) {
                    console.error(&#x60;&#x52A0;&#x8F7D;&#x6587;&#x7AE0; ${category}/${id}.txt &#x5931;&#x8D25;:&#x60;, error);
                }
                // &#x5355;&#x7BC7;&#x6587;&#x7AE0;&#x52A0;&#x8F7D;&#x5931;&#x8D25;&#x4E0D;&#x5F71;&#x54CD;&#x6574;&#x4F53;&#xFF0C;&#x7EE7;&#x7EED;&#x52A0;&#x8F7D;&#x4E0B;&#x4E00;&#x7BC7;

编辑 index.html（第 93 行）
增加返回首页
增加返回首页功能的文章展示系统
V1
创建时间：07:04
新增功能说明
本次更新主要增加了 "返回首页" 功能，具体实现如下：

添加返回首页按钮：
在首页顶部导航栏添加了绿色的 "返回首页" 按钮
在文章详情页添加了同样的绿色 "返回首页" 按钮，与 "返回列表" 按钮并排显示
实现首页重置功能：
创建goToHomePage函数，点击返回首页按钮时触发
重置所有状态变量（当前分类、页码、搜索词和搜索类型）
清空搜索框，恢复默认搜索类型为 "标题搜索"
显示文章列表，隐藏文章详情
更新 URL 为首页地址
优化用户体验：
首页标题文字也可点击返回首页
返回首页时显示加载状态，提升用户感知
按钮使用绿色背景配合 Home 图标，视觉上与其他按钮区分开

通过这些改动，用户可以在任何页面快速返回系统首页，提高了导航便捷性，特别是在深层浏览时能快速回到起点。




    
增加返回首页

### 新增功能说明

本次更新主要增加了"返回首页"功能，具体实现如下：

1. **添加返回首页按钮**：
   - 在首页顶部导航栏添加了绿色的"返回首页"按钮
   - 在文章详情页添加了同样的绿色"返回首页"按钮，与"返回列表"按钮并排显示

2. **实现首页重置功能**：
   - 创建`goToHomePage`函数，点击返回首页按钮时触发
   - 重置所有状态变量（当前分类、页码、搜索词和搜索类型）
   - 清空搜索框，恢复默认搜索类型为"标题搜索"
   - 显示文章列表，隐藏文章详情
   - 更新URL为首页地址

3. **优化用户体验**：
   - 首页标题文字也可点击返回首页
   - 返回首页时显示加载状态，提升用户感知
   - 按钮使用绿色背景配合Home图标，视觉上与其他按钮区分开

通过这些改动，用户可以在任何页面快速返回系统首页，提高了导航便捷性，特别是在深层浏览时能快速回到起点。
